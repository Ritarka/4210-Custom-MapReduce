// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_masterworker_2eproto;
namespace masterworker {
class FileShard;
struct FileShardDefaultTypeInternal;
extern FileShardDefaultTypeInternal _FileShard_default_instance_;
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class InputData;
struct InputDataDefaultTypeInternal;
extern InputDataDefaultTypeInternal _InputData_default_instance_;
class MapTask;
struct MapTaskDefaultTypeInternal;
extern MapTaskDefaultTypeInternal _MapTask_default_instance_;
class MiniShard;
struct MiniShardDefaultTypeInternal;
extern MiniShardDefaultTypeInternal _MiniShard_default_instance_;
class OutputData;
struct OutputDataDefaultTypeInternal;
extern OutputDataDefaultTypeInternal _OutputData_default_instance_;
class ReduceTask;
struct ReduceTaskDefaultTypeInternal;
extern ReduceTaskDefaultTypeInternal _ReduceTask_default_instance_;
class TaskCompletion;
struct TaskCompletionDefaultTypeInternal;
extern TaskCompletionDefaultTypeInternal _TaskCompletion_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template <>
::masterworker::FileShard* Arena::CreateMaybeMessage<::masterworker::FileShard>(Arena*);
template <>
::masterworker::HelloReply* Arena::CreateMaybeMessage<::masterworker::HelloReply>(Arena*);
template <>
::masterworker::HelloRequest* Arena::CreateMaybeMessage<::masterworker::HelloRequest>(Arena*);
template <>
::masterworker::InputData* Arena::CreateMaybeMessage<::masterworker::InputData>(Arena*);
template <>
::masterworker::MapTask* Arena::CreateMaybeMessage<::masterworker::MapTask>(Arena*);
template <>
::masterworker::MiniShard* Arena::CreateMaybeMessage<::masterworker::MiniShard>(Arena*);
template <>
::masterworker::OutputData* Arena::CreateMaybeMessage<::masterworker::OutputData>(Arena*);
template <>
::masterworker::ReduceTask* Arena::CreateMaybeMessage<::masterworker::ReduceTask>(Arena*);
template <>
::masterworker::TaskCompletion* Arena::CreateMaybeMessage<::masterworker::TaskCompletion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace masterworker {
enum TaskType : int {
  MAP = 0,
  REDUCE = 1,
  EMIT = 2,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = static_cast<TaskType>(0);
constexpr TaskType TaskType_MAX = static_cast<TaskType>(2);
constexpr int TaskType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TaskType_descriptor();
template <typename T>
const std::string& TaskType_Name(T value) {
  static_assert(std::is_same<T, TaskType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskType_Name().");
  return TaskType_Name(static_cast<TaskType>(value));
}
template <>
inline const std::string& TaskType_Name(TaskType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TaskType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TaskType_Parse(absl::string_view name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
      TaskType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class InputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.InputData) */ {
 public:
  inline InputData() : InputData(nullptr) {}
  ~InputData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputData(const InputData& from);
  InputData(InputData&& from) noexcept
    : InputData() {
    *this = ::std::move(from);
  }

  inline InputData& operator=(const InputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputData& operator=(InputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputData* internal_default_instance() {
    return reinterpret_cast<const InputData*>(
               &_InputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputData& a, InputData& b) {
    a.Swap(&b);
  }
  inline void Swap(InputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputData& from) {
    InputData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.InputData";
  }
  protected:
  explicit InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // string input = 1;
  void clear_input() ;
  const std::string& input() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(Arg_&& arg, Args_... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* ptr);

  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(
      const std::string& value);
  std::string* _internal_mutable_input();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.InputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class OutputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.OutputData) */ {
 public:
  inline OutputData() : OutputData(nullptr) {}
  ~OutputData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputData(const OutputData& from);
  OutputData(OutputData&& from) noexcept
    : OutputData() {
    *this = ::std::move(from);
  }

  inline OutputData& operator=(const OutputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputData& operator=(OutputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputData* internal_default_instance() {
    return reinterpret_cast<const OutputData*>(
               &_OutputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OutputData& a, OutputData& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputData& from) {
    OutputData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.OutputData";
  }
  protected:
  explicit OutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result() ;
  const std::string& result() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* ptr);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.OutputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class MiniShard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MiniShard) */ {
 public:
  inline MiniShard() : MiniShard(nullptr) {}
  ~MiniShard() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MiniShard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MiniShard(const MiniShard& from);
  MiniShard(MiniShard&& from) noexcept
    : MiniShard() {
    *this = ::std::move(from);
  }

  inline MiniShard& operator=(const MiniShard& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiniShard& operator=(MiniShard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiniShard& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiniShard* internal_default_instance() {
    return reinterpret_cast<const MiniShard*>(
               &_MiniShard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MiniShard& a, MiniShard& b) {
    a.Swap(&b);
  }
  inline void Swap(MiniShard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiniShard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiniShard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MiniShard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MiniShard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MiniShard& from) {
    MiniShard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiniShard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.MiniShard";
  }
  protected:
  explicit MiniShard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kStartOffsetFieldNumber = 2,
    kEndOffsetFieldNumber = 3,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // int64 start_offset = 2;
  void clear_start_offset() ;
  ::int64_t start_offset() const;
  void set_start_offset(::int64_t value);

  private:
  ::int64_t _internal_start_offset() const;
  void _internal_set_start_offset(::int64_t value);

  public:
  // int64 end_offset = 3;
  void clear_end_offset() ;
  ::int64_t end_offset() const;
  void set_end_offset(::int64_t value);

  private:
  ::int64_t _internal_end_offset() const;
  void _internal_set_end_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.MiniShard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::int64_t start_offset_;
    ::int64_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class FileShard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.FileShard) */ {
 public:
  inline FileShard() : FileShard(nullptr) {}
  ~FileShard() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileShard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileShard(const FileShard& from);
  FileShard(FileShard&& from) noexcept
    : FileShard() {
    *this = ::std::move(from);
  }

  inline FileShard& operator=(const FileShard& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileShard& operator=(FileShard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileShard& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileShard* internal_default_instance() {
    return reinterpret_cast<const FileShard*>(
               &_FileShard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileShard& a, FileShard& b) {
    a.Swap(&b);
  }
  inline void Swap(FileShard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileShard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileShard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileShard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileShard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileShard& from) {
    FileShard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileShard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.FileShard";
  }
  protected:
  explicit FileShard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 1,
  };
  // repeated .masterworker.MiniShard shards = 1;
  int shards_size() const;
  private:
  int _internal_shards_size() const;

  public:
  void clear_shards() ;
  ::masterworker::MiniShard* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::MiniShard >*
      mutable_shards();
  private:
  const ::masterworker::MiniShard& _internal_shards(int index) const;
  ::masterworker::MiniShard* _internal_add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::MiniShard>& _internal_shards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::MiniShard>* _internal_mutable_shards();
  public:
  const ::masterworker::MiniShard& shards(int index) const;
  ::masterworker::MiniShard* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::MiniShard >&
      shards() const;
  // @@protoc_insertion_point(class_scope:masterworker.FileShard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::MiniShard > shards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class MapTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapTask) */ {
 public:
  inline MapTask() : MapTask(nullptr) {}
  ~MapTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTask(const MapTask& from);
  MapTask(MapTask&& from) noexcept
    : MapTask() {
    *this = ::std::move(from);
  }

  inline MapTask& operator=(const MapTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTask& operator=(MapTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTask* internal_default_instance() {
    return reinterpret_cast<const MapTask*>(
               &_MapTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapTask& a, MapTask& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapTask& from) {
    MapTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.MapTask";
  }
  protected:
  explicit MapTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 3,
    kFileShardFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // string filePath = 3;
  void clear_filepath() ;
  const std::string& filepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filepath(Arg_&& arg, Args_... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* ptr);

  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(
      const std::string& value);
  std::string* _internal_mutable_filepath();

  public:
  // .masterworker.FileShard fileShard = 4;
  bool has_fileshard() const;
  void clear_fileshard() ;
  const ::masterworker::FileShard& fileshard() const;
  PROTOBUF_NODISCARD ::masterworker::FileShard* release_fileshard();
  ::masterworker::FileShard* mutable_fileshard();
  void set_allocated_fileshard(::masterworker::FileShard* fileshard);
  private:
  const ::masterworker::FileShard& _internal_fileshard() const;
  ::masterworker::FileShard* _internal_mutable_fileshard();
  public:
  void unsafe_arena_set_allocated_fileshard(
      ::masterworker::FileShard* fileshard);
  ::masterworker::FileShard* unsafe_arena_release_fileshard();
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.MapTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    ::masterworker::FileShard* fileshard_;
    ::int32_t taskid_;
    int tasktype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class ReduceTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceTask) */ {
 public:
  inline ReduceTask() : ReduceTask(nullptr) {}
  ~ReduceTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReduceTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceTask(const ReduceTask& from);
  ReduceTask(ReduceTask&& from) noexcept
    : ReduceTask() {
    *this = ::std::move(from);
  }

  inline ReduceTask& operator=(const ReduceTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceTask& operator=(ReduceTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceTask* internal_default_instance() {
    return reinterpret_cast<const ReduceTask*>(
               &_ReduceTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReduceTask& a, ReduceTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceTask& from) {
    ReduceTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.ReduceTask";
  }
  protected:
  explicit ReduceTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFilePathFieldNumber = 3,
    kOutputFilePathFieldNumber = 4,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // repeated string inputFilePath = 3;
  int inputfilepath_size() const;
  private:
  int _internal_inputfilepath_size() const;

  public:
  void clear_inputfilepath() ;
  const std::string& inputfilepath(int index) const;
  std::string* mutable_inputfilepath(int index);
  void set_inputfilepath(int index, const std::string& value);
  void set_inputfilepath(int index, std::string&& value);
  void set_inputfilepath(int index, const char* value);
  void set_inputfilepath(int index, const char* value, std::size_t size);
  void set_inputfilepath(int index, absl::string_view value);
  std::string* add_inputfilepath();
  void add_inputfilepath(const std::string& value);
  void add_inputfilepath(std::string&& value);
  void add_inputfilepath(const char* value);
  void add_inputfilepath(const char* value, std::size_t size);
  void add_inputfilepath(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputfilepath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputfilepath();

  private:
  const std::string& _internal_inputfilepath(int index) const;
  std::string* _internal_add_inputfilepath();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_inputfilepath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_inputfilepath();

  public:
  // string outputFilePath = 4;
  void clear_outputfilepath() ;
  const std::string& outputfilepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outputfilepath(Arg_&& arg, Args_... args);
  std::string* mutable_outputfilepath();
  PROTOBUF_NODISCARD std::string* release_outputfilepath();
  void set_allocated_outputfilepath(std::string* ptr);

  private:
  const std::string& _internal_outputfilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputfilepath(
      const std::string& value);
  std::string* _internal_mutable_outputfilepath();

  public:
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.ReduceTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputfilepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputfilepath_;
    ::int32_t taskid_;
    int tasktype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class TaskCompletion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.TaskCompletion) */ {
 public:
  inline TaskCompletion() : TaskCompletion(nullptr) {}
  ~TaskCompletion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskCompletion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCompletion(const TaskCompletion& from);
  TaskCompletion(TaskCompletion&& from) noexcept
    : TaskCompletion() {
    *this = ::std::move(from);
  }

  inline TaskCompletion& operator=(const TaskCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCompletion& operator=(TaskCompletion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCompletion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCompletion* internal_default_instance() {
    return reinterpret_cast<const TaskCompletion*>(
               &_TaskCompletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TaskCompletion& a, TaskCompletion& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCompletion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCompletion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskCompletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskCompletion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskCompletion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskCompletion& from) {
    TaskCompletion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCompletion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.TaskCompletion";
  }
  protected:
  explicit TaskCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDataFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // .masterworker.OutputData outputData = 3;
  bool has_outputdata() const;
  void clear_outputdata() ;
  const ::masterworker::OutputData& outputdata() const;
  PROTOBUF_NODISCARD ::masterworker::OutputData* release_outputdata();
  ::masterworker::OutputData* mutable_outputdata();
  void set_allocated_outputdata(::masterworker::OutputData* outputdata);
  private:
  const ::masterworker::OutputData& _internal_outputdata() const;
  ::masterworker::OutputData* _internal_mutable_outputdata();
  public:
  void unsafe_arena_set_allocated_outputdata(
      ::masterworker::OutputData* outputdata);
  ::masterworker::OutputData* unsafe_arena_release_outputdata();
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.TaskCompletion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::masterworker::OutputData* outputdata_;
    ::int32_t taskid_;
    int tasktype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:masterworker.HelloRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:masterworker.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:masterworker.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:masterworker.HelloReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:masterworker.HelloReply.message)
  return _s;
}
inline const std::string& HelloReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:masterworker.HelloReply.message)
  return _impl_.message_.Release();
}
inline void HelloReply::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.HelloReply.message)
}

// -------------------------------------------------------------------

// InputData

// string input = 1;
inline void InputData::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& InputData::input() const {
  // @@protoc_insertion_point(field_get:masterworker.InputData.input)
  return _internal_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputData::set_input(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.input_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.InputData.input)
}
inline std::string* InputData::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:masterworker.InputData.input)
  return _s;
}
inline const std::string& InputData::_internal_input() const {
  return _impl_.input_.Get();
}
inline void InputData::_internal_set_input(const std::string& value) {
  ;


  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* InputData::_internal_mutable_input() {
  ;
  return _impl_.input_.Mutable( GetArenaForAllocation());
}
inline std::string* InputData::release_input() {
  // @@protoc_insertion_point(field_release:masterworker.InputData.input)
  return _impl_.input_.Release();
}
inline void InputData::set_allocated_input(std::string* value) {
  _impl_.input_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_.IsDefault()) {
          _impl_.input_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.InputData.input)
}

// -------------------------------------------------------------------

// OutputData

// string result = 1;
inline void OutputData::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& OutputData::result() const {
  // @@protoc_insertion_point(field_get:masterworker.OutputData.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutputData::set_result(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.OutputData.result)
}
inline std::string* OutputData::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:masterworker.OutputData.result)
  return _s;
}
inline const std::string& OutputData::_internal_result() const {
  return _impl_.result_.Get();
}
inline void OutputData::_internal_set_result(const std::string& value) {
  ;


  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* OutputData::_internal_mutable_result() {
  ;
  return _impl_.result_.Mutable( GetArenaForAllocation());
}
inline std::string* OutputData::release_result() {
  // @@protoc_insertion_point(field_release:masterworker.OutputData.result)
  return _impl_.result_.Release();
}
inline void OutputData::set_allocated_result(std::string* value) {
  _impl_.result_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_.IsDefault()) {
          _impl_.result_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.OutputData.result)
}

// -------------------------------------------------------------------

// MiniShard

// string file_name = 1;
inline void MiniShard::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& MiniShard::file_name() const {
  // @@protoc_insertion_point(field_get:masterworker.MiniShard.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiniShard::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MiniShard.file_name)
}
inline std::string* MiniShard::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:masterworker.MiniShard.file_name)
  return _s;
}
inline const std::string& MiniShard::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void MiniShard::_internal_set_file_name(const std::string& value) {
  ;


  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MiniShard::_internal_mutable_file_name() {
  ;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* MiniShard::release_file_name() {
  // @@protoc_insertion_point(field_release:masterworker.MiniShard.file_name)
  return _impl_.file_name_.Release();
}
inline void MiniShard::set_allocated_file_name(std::string* value) {
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MiniShard.file_name)
}

// int64 start_offset = 2;
inline void MiniShard::clear_start_offset() {
  _impl_.start_offset_ = ::int64_t{0};
}
inline ::int64_t MiniShard::start_offset() const {
  // @@protoc_insertion_point(field_get:masterworker.MiniShard.start_offset)
  return _internal_start_offset();
}
inline void MiniShard::set_start_offset(::int64_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:masterworker.MiniShard.start_offset)
}
inline ::int64_t MiniShard::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline void MiniShard::_internal_set_start_offset(::int64_t value) {
  ;
  _impl_.start_offset_ = value;
}

// int64 end_offset = 3;
inline void MiniShard::clear_end_offset() {
  _impl_.end_offset_ = ::int64_t{0};
}
inline ::int64_t MiniShard::end_offset() const {
  // @@protoc_insertion_point(field_get:masterworker.MiniShard.end_offset)
  return _internal_end_offset();
}
inline void MiniShard::set_end_offset(::int64_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:masterworker.MiniShard.end_offset)
}
inline ::int64_t MiniShard::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline void MiniShard::_internal_set_end_offset(::int64_t value) {
  ;
  _impl_.end_offset_ = value;
}

// -------------------------------------------------------------------

// FileShard

// repeated .masterworker.MiniShard shards = 1;
inline int FileShard::_internal_shards_size() const {
  return _impl_.shards_.size();
}
inline int FileShard::shards_size() const {
  return _internal_shards_size();
}
inline void FileShard::clear_shards() {
  _internal_mutable_shards()->Clear();
}
inline ::masterworker::MiniShard* FileShard::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.FileShard.shards)
  return _internal_mutable_shards()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::MiniShard >*
FileShard::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.FileShard.shards)
  return _internal_mutable_shards();
}
inline const ::masterworker::MiniShard& FileShard::_internal_shards(int index) const {
  return _internal_shards().Get(index);
}
inline const ::masterworker::MiniShard& FileShard::shards(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.FileShard.shards)
  return _internal_shards(index);
}
inline ::masterworker::MiniShard* FileShard::_internal_add_shards() {
  return _internal_mutable_shards()->Add();
}
inline ::masterworker::MiniShard* FileShard::add_shards() {
  ::masterworker::MiniShard* _add = _internal_add_shards();
  // @@protoc_insertion_point(field_add:masterworker.FileShard.shards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::MiniShard >&
FileShard::shards() const {
  // @@protoc_insertion_point(field_list:masterworker.FileShard.shards)
  return _internal_shards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::MiniShard>&
FileShard::_internal_shards() const {
  return _impl_.shards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::MiniShard>*
FileShard::_internal_mutable_shards() {
  return &_impl_.shards_;
}

// -------------------------------------------------------------------

// MapTask

// int32 taskId = 1;
inline void MapTask::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t MapTask::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.taskId)
  return _internal_taskid();
}
inline void MapTask::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTask.taskId)
}
inline ::int32_t MapTask::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void MapTask::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void MapTask::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType MapTask::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.taskType)
  return _internal_tasktype();
}
inline void MapTask::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTask.taskType)
}
inline ::masterworker::TaskType MapTask::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void MapTask::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// string filePath = 3;
inline void MapTask::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& MapTask::filepath() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.filePath)
  return _internal_filepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapTask::set_filepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.filepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MapTask.filePath)
}
inline std::string* MapTask::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTask.filePath)
  return _s;
}
inline const std::string& MapTask::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void MapTask::_internal_set_filepath(const std::string& value) {
  ;


  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTask::_internal_mutable_filepath() {
  ;
  return _impl_.filepath_.Mutable( GetArenaForAllocation());
}
inline std::string* MapTask::release_filepath() {
  // @@protoc_insertion_point(field_release:masterworker.MapTask.filePath)
  return _impl_.filepath_.Release();
}
inline void MapTask::set_allocated_filepath(std::string* value) {
  _impl_.filepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filepath_.IsDefault()) {
          _impl_.filepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTask.filePath)
}

// .masterworker.FileShard fileShard = 4;
inline bool MapTask::has_fileshard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fileshard_ != nullptr);
  return value;
}
inline void MapTask::clear_fileshard() {
  if (_impl_.fileshard_ != nullptr) _impl_.fileshard_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterworker::FileShard& MapTask::_internal_fileshard() const {
  const ::masterworker::FileShard* p = _impl_.fileshard_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::FileShard&>(
      ::masterworker::_FileShard_default_instance_);
}
inline const ::masterworker::FileShard& MapTask::fileshard() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.fileShard)
  return _internal_fileshard();
}
inline void MapTask::unsafe_arena_set_allocated_fileshard(
    ::masterworker::FileShard* fileshard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileshard_);
  }
  _impl_.fileshard_ = fileshard;
  if (fileshard) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MapTask.fileShard)
}
inline ::masterworker::FileShard* MapTask::release_fileshard() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::FileShard* temp = _impl_.fileshard_;
  _impl_.fileshard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::masterworker::FileShard* MapTask::unsafe_arena_release_fileshard() {
  // @@protoc_insertion_point(field_release:masterworker.MapTask.fileShard)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::FileShard* temp = _impl_.fileshard_;
  _impl_.fileshard_ = nullptr;
  return temp;
}
inline ::masterworker::FileShard* MapTask::_internal_mutable_fileshard() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fileshard_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::FileShard>(GetArenaForAllocation());
    _impl_.fileshard_ = p;
  }
  return _impl_.fileshard_;
}
inline ::masterworker::FileShard* MapTask::mutable_fileshard() {
  ::masterworker::FileShard* _msg = _internal_mutable_fileshard();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTask.fileShard)
  return _msg;
}
inline void MapTask::set_allocated_fileshard(::masterworker::FileShard* fileshard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fileshard_;
  }
  if (fileshard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fileshard);
    if (message_arena != submessage_arena) {
      fileshard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileshard, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fileshard_ = fileshard;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTask.fileShard)
}

// -------------------------------------------------------------------

// ReduceTask

// int32 taskId = 1;
inline void ReduceTask::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t ReduceTask::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.taskId)
  return _internal_taskid();
}
inline void ReduceTask::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.taskId)
}
inline ::int32_t ReduceTask::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void ReduceTask::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void ReduceTask::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType ReduceTask::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.taskType)
  return _internal_tasktype();
}
inline void ReduceTask::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.taskType)
}
inline ::masterworker::TaskType ReduceTask::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void ReduceTask::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// repeated string inputFilePath = 3;
inline int ReduceTask::_internal_inputfilepath_size() const {
  return _impl_.inputfilepath_.size();
}
inline int ReduceTask::inputfilepath_size() const {
  return _internal_inputfilepath_size();
}
inline void ReduceTask::clear_inputfilepath() {
  _internal_mutable_inputfilepath()->Clear();
}
inline std::string* ReduceTask::add_inputfilepath() {
  std::string* _s = _internal_add_inputfilepath();
  // @@protoc_insertion_point(field_add_mutable:masterworker.ReduceTask.inputFilePath)
  return _s;
}
inline const std::string& ReduceTask::inputfilepath(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.inputFilePath)
  return _internal_inputfilepath(index);
}
inline std::string* ReduceTask::mutable_inputfilepath(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTask.inputFilePath)
  return _internal_mutable_inputfilepath()->Mutable(index);
}
inline void ReduceTask::set_inputfilepath(int index, const std::string& value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::set_inputfilepath(int index, std::string&& value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::set_inputfilepath(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::set_inputfilepath(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::set_inputfilepath(int index, absl::string_view value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::add_inputfilepath(const std::string& value) {
  _internal_mutable_inputfilepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::add_inputfilepath(std::string&& value) {
  _internal_mutable_inputfilepath()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::add_inputfilepath(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_inputfilepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::add_inputfilepath(const char* value, std::size_t size) {
  _internal_mutable_inputfilepath()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.ReduceTask.inputFilePath)
}
inline void ReduceTask::add_inputfilepath(absl::string_view value) {
  _internal_mutable_inputfilepath()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:masterworker.ReduceTask.inputFilePath)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReduceTask::inputfilepath() const {
  // @@protoc_insertion_point(field_list:masterworker.ReduceTask.inputFilePath)
  return _internal_inputfilepath();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ReduceTask::mutable_inputfilepath() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.ReduceTask.inputFilePath)
  return _internal_mutable_inputfilepath();
}
inline const std::string& ReduceTask::_internal_inputfilepath(int index) const {
  return _internal_inputfilepath().Get(index);
}
inline std::string* ReduceTask::_internal_add_inputfilepath() {
  return _internal_mutable_inputfilepath()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReduceTask::_internal_inputfilepath() const {
  return _impl_.inputfilepath_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReduceTask::_internal_mutable_inputfilepath() {
  return &_impl_.inputfilepath_;
}

// string outputFilePath = 4;
inline void ReduceTask::clear_outputfilepath() {
  _impl_.outputfilepath_.ClearToEmpty();
}
inline const std::string& ReduceTask::outputfilepath() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.outputFilePath)
  return _internal_outputfilepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReduceTask::set_outputfilepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.outputfilepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.outputFilePath)
}
inline std::string* ReduceTask::mutable_outputfilepath() {
  std::string* _s = _internal_mutable_outputfilepath();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTask.outputFilePath)
  return _s;
}
inline const std::string& ReduceTask::_internal_outputfilepath() const {
  return _impl_.outputfilepath_.Get();
}
inline void ReduceTask::_internal_set_outputfilepath(const std::string& value) {
  ;


  _impl_.outputfilepath_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceTask::_internal_mutable_outputfilepath() {
  ;
  return _impl_.outputfilepath_.Mutable( GetArenaForAllocation());
}
inline std::string* ReduceTask::release_outputfilepath() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceTask.outputFilePath)
  return _impl_.outputfilepath_.Release();
}
inline void ReduceTask::set_allocated_outputfilepath(std::string* value) {
  _impl_.outputfilepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outputfilepath_.IsDefault()) {
          _impl_.outputfilepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceTask.outputFilePath)
}

// -------------------------------------------------------------------

// TaskCompletion

// int32 taskId = 1;
inline void TaskCompletion::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t TaskCompletion::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.taskId)
  return _internal_taskid();
}
inline void TaskCompletion::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.TaskCompletion.taskId)
}
inline ::int32_t TaskCompletion::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void TaskCompletion::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void TaskCompletion::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType TaskCompletion::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.taskType)
  return _internal_tasktype();
}
inline void TaskCompletion::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.TaskCompletion.taskType)
}
inline ::masterworker::TaskType TaskCompletion::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void TaskCompletion::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// .masterworker.OutputData outputData = 3;
inline bool TaskCompletion::has_outputdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outputdata_ != nullptr);
  return value;
}
inline void TaskCompletion::clear_outputdata() {
  if (_impl_.outputdata_ != nullptr) _impl_.outputdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterworker::OutputData& TaskCompletion::_internal_outputdata() const {
  const ::masterworker::OutputData* p = _impl_.outputdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::OutputData&>(
      ::masterworker::_OutputData_default_instance_);
}
inline const ::masterworker::OutputData& TaskCompletion::outputdata() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.outputData)
  return _internal_outputdata();
}
inline void TaskCompletion::unsafe_arena_set_allocated_outputdata(
    ::masterworker::OutputData* outputdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outputdata_);
  }
  _impl_.outputdata_ = outputdata;
  if (outputdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.TaskCompletion.outputData)
}
inline ::masterworker::OutputData* TaskCompletion::release_outputdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::OutputData* temp = _impl_.outputdata_;
  _impl_.outputdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::masterworker::OutputData* TaskCompletion::unsafe_arena_release_outputdata() {
  // @@protoc_insertion_point(field_release:masterworker.TaskCompletion.outputData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::OutputData* temp = _impl_.outputdata_;
  _impl_.outputdata_ = nullptr;
  return temp;
}
inline ::masterworker::OutputData* TaskCompletion::_internal_mutable_outputdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.outputdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::OutputData>(GetArenaForAllocation());
    _impl_.outputdata_ = p;
  }
  return _impl_.outputdata_;
}
inline ::masterworker::OutputData* TaskCompletion::mutable_outputdata() {
  ::masterworker::OutputData* _msg = _internal_mutable_outputdata();
  // @@protoc_insertion_point(field_mutable:masterworker.TaskCompletion.outputData)
  return _msg;
}
inline void TaskCompletion::set_allocated_outputdata(::masterworker::OutputData* outputdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.outputdata_;
  }
  if (outputdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outputdata);
    if (message_arena != submessage_arena) {
      outputdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.outputdata_ = outputdata;
  // @@protoc_insertion_point(field_set_allocated:masterworker.TaskCompletion.outputData)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::masterworker::TaskType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::masterworker::TaskType>() {
  return ::masterworker::TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
