// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_masterworker_2eproto;
namespace masterworker {
class InputData;
struct InputDataDefaultTypeInternal;
extern InputDataDefaultTypeInternal _InputData_default_instance_;
class MapTask;
struct MapTaskDefaultTypeInternal;
extern MapTaskDefaultTypeInternal _MapTask_default_instance_;
class OutputData;
struct OutputDataDefaultTypeInternal;
extern OutputDataDefaultTypeInternal _OutputData_default_instance_;
class ReduceTask;
struct ReduceTaskDefaultTypeInternal;
extern ReduceTaskDefaultTypeInternal _ReduceTask_default_instance_;
class TaskCompletion;
struct TaskCompletionDefaultTypeInternal;
extern TaskCompletionDefaultTypeInternal _TaskCompletion_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template <>
::masterworker::InputData* Arena::CreateMaybeMessage<::masterworker::InputData>(Arena*);
template <>
::masterworker::MapTask* Arena::CreateMaybeMessage<::masterworker::MapTask>(Arena*);
template <>
::masterworker::OutputData* Arena::CreateMaybeMessage<::masterworker::OutputData>(Arena*);
template <>
::masterworker::ReduceTask* Arena::CreateMaybeMessage<::masterworker::ReduceTask>(Arena*);
template <>
::masterworker::TaskCompletion* Arena::CreateMaybeMessage<::masterworker::TaskCompletion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace masterworker {
enum TaskType : int {
  MAP = 0,
  REDUCE = 1,
  EMIT = 2,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = static_cast<TaskType>(0);
constexpr TaskType TaskType_MAX = static_cast<TaskType>(2);
constexpr int TaskType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TaskType_descriptor();
template <typename T>
const std::string& TaskType_Name(T value) {
  static_assert(std::is_same<T, TaskType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TaskType_Name().");
  return TaskType_Name(static_cast<TaskType>(value));
}
template <>
inline const std::string& TaskType_Name(TaskType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TaskType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TaskType_Parse(absl::string_view name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
      TaskType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.InputData) */ {
 public:
  inline InputData() : InputData(nullptr) {}
  ~InputData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputData(const InputData& from);
  InputData(InputData&& from) noexcept
    : InputData() {
    *this = ::std::move(from);
  }

  inline InputData& operator=(const InputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputData& operator=(InputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputData* internal_default_instance() {
    return reinterpret_cast<const InputData*>(
               &_InputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputData& a, InputData& b) {
    a.Swap(&b);
  }
  inline void Swap(InputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputData& from) {
    InputData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.InputData";
  }
  protected:
  explicit InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // string input = 1;
  void clear_input() ;
  const std::string& input() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(Arg_&& arg, Args_... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* ptr);

  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(
      const std::string& value);
  std::string* _internal_mutable_input();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.InputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class OutputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.OutputData) */ {
 public:
  inline OutputData() : OutputData(nullptr) {}
  ~OutputData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputData(const OutputData& from);
  OutputData(OutputData&& from) noexcept
    : OutputData() {
    *this = ::std::move(from);
  }

  inline OutputData& operator=(const OutputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputData& operator=(OutputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputData* internal_default_instance() {
    return reinterpret_cast<const OutputData*>(
               &_OutputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputData& a, OutputData& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputData& from) {
    OutputData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.OutputData";
  }
  protected:
  explicit OutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result() ;
  const std::string& result() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* ptr);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.OutputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class MapTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapTask) */ {
 public:
  inline MapTask() : MapTask(nullptr) {}
  ~MapTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTask(const MapTask& from);
  MapTask(MapTask&& from) noexcept
    : MapTask() {
    *this = ::std::move(from);
  }

  inline MapTask& operator=(const MapTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTask& operator=(MapTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTask* internal_default_instance() {
    return reinterpret_cast<const MapTask*>(
               &_MapTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapTask& a, MapTask& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapTask& from) {
    MapTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.MapTask";
  }
  protected:
  explicit MapTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputDataFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // .masterworker.InputData inputData = 3;
  bool has_inputdata() const;
  void clear_inputdata() ;
  const ::masterworker::InputData& inputdata() const;
  PROTOBUF_NODISCARD ::masterworker::InputData* release_inputdata();
  ::masterworker::InputData* mutable_inputdata();
  void set_allocated_inputdata(::masterworker::InputData* inputdata);
  private:
  const ::masterworker::InputData& _internal_inputdata() const;
  ::masterworker::InputData* _internal_mutable_inputdata();
  public:
  void unsafe_arena_set_allocated_inputdata(
      ::masterworker::InputData* inputdata);
  ::masterworker::InputData* unsafe_arena_release_inputdata();
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.MapTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::masterworker::InputData* inputdata_;
    ::int32_t taskid_;
    int tasktype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class ReduceTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceTask) */ {
 public:
  inline ReduceTask() : ReduceTask(nullptr) {}
  ~ReduceTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReduceTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceTask(const ReduceTask& from);
  ReduceTask(ReduceTask&& from) noexcept
    : ReduceTask() {
    *this = ::std::move(from);
  }

  inline ReduceTask& operator=(const ReduceTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceTask& operator=(ReduceTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceTask* internal_default_instance() {
    return reinterpret_cast<const ReduceTask*>(
               &_ReduceTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReduceTask& a, ReduceTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceTask& from) {
    ReduceTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.ReduceTask";
  }
  protected:
  explicit ReduceTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntermediateResultFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // repeated .masterworker.OutputData intermediateResult = 3;
  int intermediateresult_size() const;
  private:
  int _internal_intermediateresult_size() const;

  public:
  void clear_intermediateresult() ;
  ::masterworker::OutputData* mutable_intermediateresult(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::OutputData >*
      mutable_intermediateresult();
  private:
  const ::masterworker::OutputData& _internal_intermediateresult(int index) const;
  ::masterworker::OutputData* _internal_add_intermediateresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::OutputData>& _internal_intermediateresult() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::OutputData>* _internal_mutable_intermediateresult();
  public:
  const ::masterworker::OutputData& intermediateresult(int index) const;
  ::masterworker::OutputData* add_intermediateresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::OutputData >&
      intermediateresult() const;
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.ReduceTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::OutputData > intermediateresult_;
    ::int32_t taskid_;
    int tasktype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class TaskCompletion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.TaskCompletion) */ {
 public:
  inline TaskCompletion() : TaskCompletion(nullptr) {}
  ~TaskCompletion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskCompletion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCompletion(const TaskCompletion& from);
  TaskCompletion(TaskCompletion&& from) noexcept
    : TaskCompletion() {
    *this = ::std::move(from);
  }

  inline TaskCompletion& operator=(const TaskCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCompletion& operator=(TaskCompletion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCompletion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCompletion* internal_default_instance() {
    return reinterpret_cast<const TaskCompletion*>(
               &_TaskCompletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskCompletion& a, TaskCompletion& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCompletion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCompletion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskCompletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskCompletion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskCompletion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskCompletion& from) {
    TaskCompletion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCompletion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.TaskCompletion";
  }
  protected:
  explicit TaskCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDataFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
  };
  // .masterworker.OutputData outputData = 3;
  bool has_outputdata() const;
  void clear_outputdata() ;
  const ::masterworker::OutputData& outputdata() const;
  PROTOBUF_NODISCARD ::masterworker::OutputData* release_outputdata();
  ::masterworker::OutputData* mutable_outputdata();
  void set_allocated_outputdata(::masterworker::OutputData* outputdata);
  private:
  const ::masterworker::OutputData& _internal_outputdata() const;
  ::masterworker::OutputData* _internal_mutable_outputdata();
  public:
  void unsafe_arena_set_allocated_outputdata(
      ::masterworker::OutputData* outputdata);
  ::masterworker::OutputData* unsafe_arena_release_outputdata();
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // .masterworker.TaskType taskType = 2;
  void clear_tasktype() ;
  ::masterworker::TaskType tasktype() const;
  void set_tasktype(::masterworker::TaskType value);

  private:
  ::masterworker::TaskType _internal_tasktype() const;
  void _internal_set_tasktype(::masterworker::TaskType value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.TaskCompletion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::masterworker::OutputData* outputdata_;
    ::int32_t taskid_;
    int tasktype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InputData

// string input = 1;
inline void InputData::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& InputData::input() const {
  // @@protoc_insertion_point(field_get:masterworker.InputData.input)
  return _internal_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputData::set_input(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.input_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.InputData.input)
}
inline std::string* InputData::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:masterworker.InputData.input)
  return _s;
}
inline const std::string& InputData::_internal_input() const {
  return _impl_.input_.Get();
}
inline void InputData::_internal_set_input(const std::string& value) {
  ;


  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* InputData::_internal_mutable_input() {
  ;
  return _impl_.input_.Mutable( GetArenaForAllocation());
}
inline std::string* InputData::release_input() {
  // @@protoc_insertion_point(field_release:masterworker.InputData.input)
  return _impl_.input_.Release();
}
inline void InputData::set_allocated_input(std::string* value) {
  _impl_.input_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_.IsDefault()) {
          _impl_.input_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.InputData.input)
}

// -------------------------------------------------------------------

// OutputData

// string result = 1;
inline void OutputData::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& OutputData::result() const {
  // @@protoc_insertion_point(field_get:masterworker.OutputData.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutputData::set_result(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.OutputData.result)
}
inline std::string* OutputData::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:masterworker.OutputData.result)
  return _s;
}
inline const std::string& OutputData::_internal_result() const {
  return _impl_.result_.Get();
}
inline void OutputData::_internal_set_result(const std::string& value) {
  ;


  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* OutputData::_internal_mutable_result() {
  ;
  return _impl_.result_.Mutable( GetArenaForAllocation());
}
inline std::string* OutputData::release_result() {
  // @@protoc_insertion_point(field_release:masterworker.OutputData.result)
  return _impl_.result_.Release();
}
inline void OutputData::set_allocated_result(std::string* value) {
  _impl_.result_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_.IsDefault()) {
          _impl_.result_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.OutputData.result)
}

// -------------------------------------------------------------------

// MapTask

// int32 taskId = 1;
inline void MapTask::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t MapTask::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.taskId)
  return _internal_taskid();
}
inline void MapTask::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTask.taskId)
}
inline ::int32_t MapTask::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void MapTask::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void MapTask::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType MapTask::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.taskType)
  return _internal_tasktype();
}
inline void MapTask::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTask.taskType)
}
inline ::masterworker::TaskType MapTask::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void MapTask::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// .masterworker.InputData inputData = 3;
inline bool MapTask::has_inputdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inputdata_ != nullptr);
  return value;
}
inline void MapTask::clear_inputdata() {
  if (_impl_.inputdata_ != nullptr) _impl_.inputdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterworker::InputData& MapTask::_internal_inputdata() const {
  const ::masterworker::InputData* p = _impl_.inputdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::InputData&>(
      ::masterworker::_InputData_default_instance_);
}
inline const ::masterworker::InputData& MapTask::inputdata() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTask.inputData)
  return _internal_inputdata();
}
inline void MapTask::unsafe_arena_set_allocated_inputdata(
    ::masterworker::InputData* inputdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inputdata_);
  }
  _impl_.inputdata_ = inputdata;
  if (inputdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MapTask.inputData)
}
inline ::masterworker::InputData* MapTask::release_inputdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::InputData* temp = _impl_.inputdata_;
  _impl_.inputdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::masterworker::InputData* MapTask::unsafe_arena_release_inputdata() {
  // @@protoc_insertion_point(field_release:masterworker.MapTask.inputData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::InputData* temp = _impl_.inputdata_;
  _impl_.inputdata_ = nullptr;
  return temp;
}
inline ::masterworker::InputData* MapTask::_internal_mutable_inputdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.inputdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::InputData>(GetArenaForAllocation());
    _impl_.inputdata_ = p;
  }
  return _impl_.inputdata_;
}
inline ::masterworker::InputData* MapTask::mutable_inputdata() {
  ::masterworker::InputData* _msg = _internal_mutable_inputdata();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTask.inputData)
  return _msg;
}
inline void MapTask::set_allocated_inputdata(::masterworker::InputData* inputdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inputdata_;
  }
  if (inputdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inputdata);
    if (message_arena != submessage_arena) {
      inputdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.inputdata_ = inputdata;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTask.inputData)
}

// -------------------------------------------------------------------

// ReduceTask

// int32 taskId = 1;
inline void ReduceTask::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t ReduceTask::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.taskId)
  return _internal_taskid();
}
inline void ReduceTask::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.taskId)
}
inline ::int32_t ReduceTask::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void ReduceTask::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void ReduceTask::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType ReduceTask::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.taskType)
  return _internal_tasktype();
}
inline void ReduceTask::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTask.taskType)
}
inline ::masterworker::TaskType ReduceTask::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void ReduceTask::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// repeated .masterworker.OutputData intermediateResult = 3;
inline int ReduceTask::_internal_intermediateresult_size() const {
  return _impl_.intermediateresult_.size();
}
inline int ReduceTask::intermediateresult_size() const {
  return _internal_intermediateresult_size();
}
inline void ReduceTask::clear_intermediateresult() {
  _internal_mutable_intermediateresult()->Clear();
}
inline ::masterworker::OutputData* ReduceTask::mutable_intermediateresult(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTask.intermediateResult)
  return _internal_mutable_intermediateresult()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::OutputData >*
ReduceTask::mutable_intermediateresult() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.ReduceTask.intermediateResult)
  return _internal_mutable_intermediateresult();
}
inline const ::masterworker::OutputData& ReduceTask::_internal_intermediateresult(int index) const {
  return _internal_intermediateresult().Get(index);
}
inline const ::masterworker::OutputData& ReduceTask::intermediateresult(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTask.intermediateResult)
  return _internal_intermediateresult(index);
}
inline ::masterworker::OutputData* ReduceTask::_internal_add_intermediateresult() {
  return _internal_mutable_intermediateresult()->Add();
}
inline ::masterworker::OutputData* ReduceTask::add_intermediateresult() {
  ::masterworker::OutputData* _add = _internal_add_intermediateresult();
  // @@protoc_insertion_point(field_add:masterworker.ReduceTask.intermediateResult)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::OutputData >&
ReduceTask::intermediateresult() const {
  // @@protoc_insertion_point(field_list:masterworker.ReduceTask.intermediateResult)
  return _internal_intermediateresult();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::OutputData>&
ReduceTask::_internal_intermediateresult() const {
  return _impl_.intermediateresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::OutputData>*
ReduceTask::_internal_mutable_intermediateresult() {
  return &_impl_.intermediateresult_;
}

// -------------------------------------------------------------------

// TaskCompletion

// int32 taskId = 1;
inline void TaskCompletion::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t TaskCompletion::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.taskId)
  return _internal_taskid();
}
inline void TaskCompletion::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.TaskCompletion.taskId)
}
inline ::int32_t TaskCompletion::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void TaskCompletion::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// .masterworker.TaskType taskType = 2;
inline void TaskCompletion::clear_tasktype() {
  _impl_.tasktype_ = 0;
}
inline ::masterworker::TaskType TaskCompletion::tasktype() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.taskType)
  return _internal_tasktype();
}
inline void TaskCompletion::set_tasktype(::masterworker::TaskType value) {
   _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:masterworker.TaskCompletion.taskType)
}
inline ::masterworker::TaskType TaskCompletion::_internal_tasktype() const {
  return static_cast<::masterworker::TaskType>(_impl_.tasktype_);
}
inline void TaskCompletion::_internal_set_tasktype(::masterworker::TaskType value) {
  ;
  _impl_.tasktype_ = value;
}

// .masterworker.OutputData outputData = 3;
inline bool TaskCompletion::has_outputdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outputdata_ != nullptr);
  return value;
}
inline void TaskCompletion::clear_outputdata() {
  if (_impl_.outputdata_ != nullptr) _impl_.outputdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterworker::OutputData& TaskCompletion::_internal_outputdata() const {
  const ::masterworker::OutputData* p = _impl_.outputdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::OutputData&>(
      ::masterworker::_OutputData_default_instance_);
}
inline const ::masterworker::OutputData& TaskCompletion::outputdata() const {
  // @@protoc_insertion_point(field_get:masterworker.TaskCompletion.outputData)
  return _internal_outputdata();
}
inline void TaskCompletion::unsafe_arena_set_allocated_outputdata(
    ::masterworker::OutputData* outputdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outputdata_);
  }
  _impl_.outputdata_ = outputdata;
  if (outputdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.TaskCompletion.outputData)
}
inline ::masterworker::OutputData* TaskCompletion::release_outputdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::OutputData* temp = _impl_.outputdata_;
  _impl_.outputdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::masterworker::OutputData* TaskCompletion::unsafe_arena_release_outputdata() {
  // @@protoc_insertion_point(field_release:masterworker.TaskCompletion.outputData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::OutputData* temp = _impl_.outputdata_;
  _impl_.outputdata_ = nullptr;
  return temp;
}
inline ::masterworker::OutputData* TaskCompletion::_internal_mutable_outputdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.outputdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::OutputData>(GetArenaForAllocation());
    _impl_.outputdata_ = p;
  }
  return _impl_.outputdata_;
}
inline ::masterworker::OutputData* TaskCompletion::mutable_outputdata() {
  ::masterworker::OutputData* _msg = _internal_mutable_outputdata();
  // @@protoc_insertion_point(field_mutable:masterworker.TaskCompletion.outputData)
  return _msg;
}
inline void TaskCompletion::set_allocated_outputdata(::masterworker::OutputData* outputdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.outputdata_;
  }
  if (outputdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outputdata);
    if (message_arena != submessage_arena) {
      outputdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.outputdata_ = outputdata;
  // @@protoc_insertion_point(field_set_allocated:masterworker.TaskCompletion.outputData)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::masterworker::TaskType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::masterworker::TaskType>() {
  return ::masterworker::TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
