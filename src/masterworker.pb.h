// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_masterworker_2eproto;
namespace masterworker {
class Fileshard;
struct FileshardDefaultTypeInternal;
extern FileshardDefaultTypeInternal _Fileshard_default_instance_;
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class IntermediateFile;
struct IntermediateFileDefaultTypeInternal;
extern IntermediateFileDefaultTypeInternal _IntermediateFile_default_instance_;
class MapTaskCompleted;
struct MapTaskCompletedDefaultTypeInternal;
extern MapTaskCompletedDefaultTypeInternal _MapTaskCompleted_default_instance_;
class MapTaskRequest;
struct MapTaskRequestDefaultTypeInternal;
extern MapTaskRequestDefaultTypeInternal _MapTaskRequest_default_instance_;
class Minishard;
struct MinishardDefaultTypeInternal;
extern MinishardDefaultTypeInternal _Minishard_default_instance_;
class OutputFile;
struct OutputFileDefaultTypeInternal;
extern OutputFileDefaultTypeInternal _OutputFile_default_instance_;
class ReduceTaskCompleted;
struct ReduceTaskCompletedDefaultTypeInternal;
extern ReduceTaskCompletedDefaultTypeInternal _ReduceTaskCompleted_default_instance_;
class ReduceTaskRequest;
struct ReduceTaskRequestDefaultTypeInternal;
extern ReduceTaskRequestDefaultTypeInternal _ReduceTaskRequest_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template <>
::masterworker::Fileshard* Arena::CreateMaybeMessage<::masterworker::Fileshard>(Arena*);
template <>
::masterworker::HelloReply* Arena::CreateMaybeMessage<::masterworker::HelloReply>(Arena*);
template <>
::masterworker::HelloRequest* Arena::CreateMaybeMessage<::masterworker::HelloRequest>(Arena*);
template <>
::masterworker::IntermediateFile* Arena::CreateMaybeMessage<::masterworker::IntermediateFile>(Arena*);
template <>
::masterworker::MapTaskCompleted* Arena::CreateMaybeMessage<::masterworker::MapTaskCompleted>(Arena*);
template <>
::masterworker::MapTaskRequest* Arena::CreateMaybeMessage<::masterworker::MapTaskRequest>(Arena*);
template <>
::masterworker::Minishard* Arena::CreateMaybeMessage<::masterworker::Minishard>(Arena*);
template <>
::masterworker::OutputFile* Arena::CreateMaybeMessage<::masterworker::OutputFile>(Arena*);
template <>
::masterworker::ReduceTaskCompleted* Arena::CreateMaybeMessage<::masterworker::ReduceTaskCompleted>(Arena*);
template <>
::masterworker::ReduceTaskRequest* Arena::CreateMaybeMessage<::masterworker::ReduceTaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace masterworker {

// ===================================================================


// -------------------------------------------------------------------

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class Minishard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.Minishard) */ {
 public:
  inline Minishard() : Minishard(nullptr) {}
  ~Minishard() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Minishard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Minishard(const Minishard& from);
  Minishard(Minishard&& from) noexcept
    : Minishard() {
    *this = ::std::move(from);
  }

  inline Minishard& operator=(const Minishard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Minishard& operator=(Minishard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Minishard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Minishard* internal_default_instance() {
    return reinterpret_cast<const Minishard*>(
               &_Minishard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Minishard& a, Minishard& b) {
    a.Swap(&b);
  }
  inline void Swap(Minishard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Minishard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Minishard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Minishard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Minishard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Minishard& from) {
    Minishard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Minishard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.Minishard";
  }
  protected:
  explicit Minishard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kStartOffsetFieldNumber = 2,
    kEndOffsetFieldNumber = 3,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // int64 start_offset = 2;
  void clear_start_offset() ;
  ::int64_t start_offset() const;
  void set_start_offset(::int64_t value);

  private:
  ::int64_t _internal_start_offset() const;
  void _internal_set_start_offset(::int64_t value);

  public:
  // int64 end_offset = 3;
  void clear_end_offset() ;
  ::int64_t end_offset() const;
  void set_end_offset(::int64_t value);

  private:
  ::int64_t _internal_end_offset() const;
  void _internal_set_end_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.Minishard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::int64_t start_offset_;
    ::int64_t end_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class Fileshard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.Fileshard) */ {
 public:
  inline Fileshard() : Fileshard(nullptr) {}
  ~Fileshard() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Fileshard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fileshard(const Fileshard& from);
  Fileshard(Fileshard&& from) noexcept
    : Fileshard() {
    *this = ::std::move(from);
  }

  inline Fileshard& operator=(const Fileshard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fileshard& operator=(Fileshard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fileshard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fileshard* internal_default_instance() {
    return reinterpret_cast<const Fileshard*>(
               &_Fileshard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Fileshard& a, Fileshard& b) {
    a.Swap(&b);
  }
  inline void Swap(Fileshard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fileshard* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fileshard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fileshard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fileshard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fileshard& from) {
    Fileshard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fileshard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.Fileshard";
  }
  protected:
  explicit Fileshard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardsFieldNumber = 1,
  };
  // repeated .masterworker.Minishard shards = 1;
  int shards_size() const;
  private:
  int _internal_shards_size() const;

  public:
  void clear_shards() ;
  ::masterworker::Minishard* mutable_shards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::Minishard >*
      mutable_shards();
  private:
  const ::masterworker::Minishard& _internal_shards(int index) const;
  ::masterworker::Minishard* _internal_add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::Minishard>& _internal_shards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::Minishard>* _internal_mutable_shards();
  public:
  const ::masterworker::Minishard& shards(int index) const;
  ::masterworker::Minishard* add_shards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::Minishard >&
      shards() const;
  // @@protoc_insertion_point(class_scope:masterworker.Fileshard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::Minishard > shards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class IntermediateFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.IntermediateFile) */ {
 public:
  inline IntermediateFile() : IntermediateFile(nullptr) {}
  ~IntermediateFile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntermediateFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntermediateFile(const IntermediateFile& from);
  IntermediateFile(IntermediateFile&& from) noexcept
    : IntermediateFile() {
    *this = ::std::move(from);
  }

  inline IntermediateFile& operator=(const IntermediateFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntermediateFile& operator=(IntermediateFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntermediateFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntermediateFile* internal_default_instance() {
    return reinterpret_cast<const IntermediateFile*>(
               &_IntermediateFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IntermediateFile& a, IntermediateFile& b) {
    a.Swap(&b);
  }
  inline void Swap(IntermediateFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntermediateFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntermediateFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntermediateFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntermediateFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntermediateFile& from) {
    IntermediateFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntermediateFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.IntermediateFile";
  }
  protected:
  explicit IntermediateFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.IntermediateFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class OutputFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.OutputFile) */ {
 public:
  inline OutputFile() : OutputFile(nullptr) {}
  ~OutputFile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutputFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputFile(const OutputFile& from);
  OutputFile(OutputFile&& from) noexcept
    : OutputFile() {
    *this = ::std::move(from);
  }

  inline OutputFile& operator=(const OutputFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputFile& operator=(OutputFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputFile* internal_default_instance() {
    return reinterpret_cast<const OutputFile*>(
               &_OutputFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OutputFile& a, OutputFile& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputFile& from) {
    OutputFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.OutputFile";
  }
  protected:
  explicit OutputFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:masterworker.OutputFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class MapTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapTaskRequest) */ {
 public:
  inline MapTaskRequest() : MapTaskRequest(nullptr) {}
  ~MapTaskRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTaskRequest(const MapTaskRequest& from);
  MapTaskRequest(MapTaskRequest&& from) noexcept
    : MapTaskRequest() {
    *this = ::std::move(from);
  }

  inline MapTaskRequest& operator=(const MapTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTaskRequest& operator=(MapTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTaskRequest* internal_default_instance() {
    return reinterpret_cast<const MapTaskRequest*>(
               &_MapTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapTaskRequest& a, MapTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapTaskRequest& from) {
    MapTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.MapTaskRequest";
  }
  protected:
  explicit MapTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 3,
    kUseridFieldNumber = 5,
    kFileShardFieldNumber = 4,
    kTaskIdFieldNumber = 1,
  };
  // string filePath = 3;
  void clear_filepath() ;
  const std::string& filepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filepath(Arg_&& arg, Args_... args);
  std::string* mutable_filepath();
  PROTOBUF_NODISCARD std::string* release_filepath();
  void set_allocated_filepath(std::string* ptr);

  private:
  const std::string& _internal_filepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filepath(
      const std::string& value);
  std::string* _internal_mutable_filepath();

  public:
  // string userid = 5;
  void clear_userid() ;
  const std::string& userid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* ptr);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // .masterworker.Fileshard fileShard = 4;
  bool has_fileshard() const;
  void clear_fileshard() ;
  const ::masterworker::Fileshard& fileshard() const;
  PROTOBUF_NODISCARD ::masterworker::Fileshard* release_fileshard();
  ::masterworker::Fileshard* mutable_fileshard();
  void set_allocated_fileshard(::masterworker::Fileshard* fileshard);
  private:
  const ::masterworker::Fileshard& _internal_fileshard() const;
  ::masterworker::Fileshard* _internal_mutable_fileshard();
  public:
  void unsafe_arena_set_allocated_fileshard(
      ::masterworker::Fileshard* fileshard);
  ::masterworker::Fileshard* unsafe_arena_release_fileshard();
  // int32 taskId = 1;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.MapTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::masterworker::Fileshard* fileshard_;
    ::int32_t taskid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class MapTaskCompleted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapTaskCompleted) */ {
 public:
  inline MapTaskCompleted() : MapTaskCompleted(nullptr) {}
  ~MapTaskCompleted() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapTaskCompleted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapTaskCompleted(const MapTaskCompleted& from);
  MapTaskCompleted(MapTaskCompleted&& from) noexcept
    : MapTaskCompleted() {
    *this = ::std::move(from);
  }

  inline MapTaskCompleted& operator=(const MapTaskCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTaskCompleted& operator=(MapTaskCompleted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapTaskCompleted& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapTaskCompleted* internal_default_instance() {
    return reinterpret_cast<const MapTaskCompleted*>(
               &_MapTaskCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MapTaskCompleted& a, MapTaskCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTaskCompleted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapTaskCompleted* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapTaskCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapTaskCompleted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapTaskCompleted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapTaskCompleted& from) {
    MapTaskCompleted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTaskCompleted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.MapTaskCompleted";
  }
  protected:
  explicit MapTaskCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.MapTaskCompleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class ReduceTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceTaskRequest) */ {
 public:
  inline ReduceTaskRequest() : ReduceTaskRequest(nullptr) {}
  ~ReduceTaskRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReduceTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceTaskRequest(const ReduceTaskRequest& from);
  ReduceTaskRequest(ReduceTaskRequest&& from) noexcept
    : ReduceTaskRequest() {
    *this = ::std::move(from);
  }

  inline ReduceTaskRequest& operator=(const ReduceTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceTaskRequest& operator=(ReduceTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ReduceTaskRequest*>(
               &_ReduceTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReduceTaskRequest& a, ReduceTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceTaskRequest& from) {
    ReduceTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.ReduceTaskRequest";
  }
  protected:
  explicit ReduceTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFilePathFieldNumber = 4,
    kOutputFileFieldNumber = 2,
    kUseridFieldNumber = 3,
    kOutputFilePathFieldNumber = 5,
    kTaskIdFieldNumber = 1,
  };
  // repeated string inputFilePath = 4;
  int inputfilepath_size() const;
  private:
  int _internal_inputfilepath_size() const;

  public:
  void clear_inputfilepath() ;
  const std::string& inputfilepath(int index) const;
  std::string* mutable_inputfilepath(int index);
  void set_inputfilepath(int index, const std::string& value);
  void set_inputfilepath(int index, std::string&& value);
  void set_inputfilepath(int index, const char* value);
  void set_inputfilepath(int index, const char* value, std::size_t size);
  void set_inputfilepath(int index, absl::string_view value);
  std::string* add_inputfilepath();
  void add_inputfilepath(const std::string& value);
  void add_inputfilepath(std::string&& value);
  void add_inputfilepath(const char* value);
  void add_inputfilepath(const char* value, std::size_t size);
  void add_inputfilepath(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputfilepath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputfilepath();

  private:
  const std::string& _internal_inputfilepath(int index) const;
  std::string* _internal_add_inputfilepath();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_inputfilepath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_inputfilepath();

  public:
  // string output_file = 2;
  void clear_output_file() ;
  const std::string& output_file() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_file(Arg_&& arg, Args_... args);
  std::string* mutable_output_file();
  PROTOBUF_NODISCARD std::string* release_output_file();
  void set_allocated_output_file(std::string* ptr);

  private:
  const std::string& _internal_output_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_file(
      const std::string& value);
  std::string* _internal_mutable_output_file();

  public:
  // string userid = 3;
  void clear_userid() ;
  const std::string& userid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* ptr);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string outputFilePath = 5;
  void clear_outputfilepath() ;
  const std::string& outputfilepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outputfilepath(Arg_&& arg, Args_... args);
  std::string* mutable_outputfilepath();
  PROTOBUF_NODISCARD std::string* release_outputfilepath();
  void set_allocated_outputfilepath(std::string* ptr);

  private:
  const std::string& _internal_outputfilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputfilepath(
      const std::string& value);
  std::string* _internal_mutable_outputfilepath();

  public:
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.ReduceTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputfilepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputfilepath_;
    ::int32_t task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};// -------------------------------------------------------------------

class ReduceTaskCompleted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceTaskCompleted) */ {
 public:
  inline ReduceTaskCompleted() : ReduceTaskCompleted(nullptr) {}
  ~ReduceTaskCompleted() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReduceTaskCompleted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReduceTaskCompleted(const ReduceTaskCompleted& from);
  ReduceTaskCompleted(ReduceTaskCompleted&& from) noexcept
    : ReduceTaskCompleted() {
    *this = ::std::move(from);
  }

  inline ReduceTaskCompleted& operator=(const ReduceTaskCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceTaskCompleted& operator=(ReduceTaskCompleted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReduceTaskCompleted& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReduceTaskCompleted* internal_default_instance() {
    return reinterpret_cast<const ReduceTaskCompleted*>(
               &_ReduceTaskCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReduceTaskCompleted& a, ReduceTaskCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceTaskCompleted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceTaskCompleted* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReduceTaskCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReduceTaskCompleted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReduceTaskCompleted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReduceTaskCompleted& from) {
    ReduceTaskCompleted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceTaskCompleted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "masterworker.ReduceTaskCompleted";
  }
  protected:
  explicit ReduceTaskCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // int32 task_id = 1;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:masterworker.ReduceTaskCompleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t task_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterworker_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:masterworker.HelloRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:masterworker.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:masterworker.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:masterworker.HelloReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HelloReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:masterworker.HelloReply.message)
  return _s;
}
inline const std::string& HelloReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:masterworker.HelloReply.message)
  return _impl_.message_.Release();
}
inline void HelloReply::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.HelloReply.message)
}

// -------------------------------------------------------------------

// Minishard

// string file_name = 1;
inline void Minishard::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& Minishard::file_name() const {
  // @@protoc_insertion_point(field_get:masterworker.Minishard.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Minishard::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.Minishard.file_name)
}
inline std::string* Minishard::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:masterworker.Minishard.file_name)
  return _s;
}
inline const std::string& Minishard::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void Minishard::_internal_set_file_name(const std::string& value) {
  ;


  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Minishard::_internal_mutable_file_name() {
  ;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Minishard::release_file_name() {
  // @@protoc_insertion_point(field_release:masterworker.Minishard.file_name)
  return _impl_.file_name_.Release();
}
inline void Minishard::set_allocated_file_name(std::string* value) {
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.Minishard.file_name)
}

// int64 start_offset = 2;
inline void Minishard::clear_start_offset() {
  _impl_.start_offset_ = ::int64_t{0};
}
inline ::int64_t Minishard::start_offset() const {
  // @@protoc_insertion_point(field_get:masterworker.Minishard.start_offset)
  return _internal_start_offset();
}
inline void Minishard::set_start_offset(::int64_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:masterworker.Minishard.start_offset)
}
inline ::int64_t Minishard::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline void Minishard::_internal_set_start_offset(::int64_t value) {
  ;
  _impl_.start_offset_ = value;
}

// int64 end_offset = 3;
inline void Minishard::clear_end_offset() {
  _impl_.end_offset_ = ::int64_t{0};
}
inline ::int64_t Minishard::end_offset() const {
  // @@protoc_insertion_point(field_get:masterworker.Minishard.end_offset)
  return _internal_end_offset();
}
inline void Minishard::set_end_offset(::int64_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:masterworker.Minishard.end_offset)
}
inline ::int64_t Minishard::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline void Minishard::_internal_set_end_offset(::int64_t value) {
  ;
  _impl_.end_offset_ = value;
}

// -------------------------------------------------------------------

// Fileshard

// repeated .masterworker.Minishard shards = 1;
inline int Fileshard::_internal_shards_size() const {
  return _impl_.shards_.size();
}
inline int Fileshard::shards_size() const {
  return _internal_shards_size();
}
inline void Fileshard::clear_shards() {
  _internal_mutable_shards()->Clear();
}
inline ::masterworker::Minishard* Fileshard::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.Fileshard.shards)
  return _internal_mutable_shards()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::Minishard >*
Fileshard::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.Fileshard.shards)
  return _internal_mutable_shards();
}
inline const ::masterworker::Minishard& Fileshard::_internal_shards(int index) const {
  return _internal_shards().Get(index);
}
inline const ::masterworker::Minishard& Fileshard::shards(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.Fileshard.shards)
  return _internal_shards(index);
}
inline ::masterworker::Minishard* Fileshard::_internal_add_shards() {
  return _internal_mutable_shards()->Add();
}
inline ::masterworker::Minishard* Fileshard::add_shards() {
  ::masterworker::Minishard* _add = _internal_add_shards();
  // @@protoc_insertion_point(field_add:masterworker.Fileshard.shards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::Minishard >&
Fileshard::shards() const {
  // @@protoc_insertion_point(field_list:masterworker.Fileshard.shards)
  return _internal_shards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::Minishard>&
Fileshard::_internal_shards() const {
  return _impl_.shards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::masterworker::Minishard>*
Fileshard::_internal_mutable_shards() {
  return &_impl_.shards_;
}

// -------------------------------------------------------------------

// IntermediateFile

// string file_name = 1;
inline void IntermediateFile::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& IntermediateFile::file_name() const {
  // @@protoc_insertion_point(field_get:masterworker.IntermediateFile.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntermediateFile::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.IntermediateFile.file_name)
}
inline std::string* IntermediateFile::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:masterworker.IntermediateFile.file_name)
  return _s;
}
inline const std::string& IntermediateFile::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void IntermediateFile::_internal_set_file_name(const std::string& value) {
  ;


  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* IntermediateFile::_internal_mutable_file_name() {
  ;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* IntermediateFile::release_file_name() {
  // @@protoc_insertion_point(field_release:masterworker.IntermediateFile.file_name)
  return _impl_.file_name_.Release();
}
inline void IntermediateFile::set_allocated_file_name(std::string* value) {
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.IntermediateFile.file_name)
}

// -------------------------------------------------------------------

// OutputFile

// string file_name = 1;
inline void OutputFile::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& OutputFile::file_name() const {
  // @@protoc_insertion_point(field_get:masterworker.OutputFile.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutputFile::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.OutputFile.file_name)
}
inline std::string* OutputFile::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:masterworker.OutputFile.file_name)
  return _s;
}
inline const std::string& OutputFile::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void OutputFile::_internal_set_file_name(const std::string& value) {
  ;


  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OutputFile::_internal_mutable_file_name() {
  ;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OutputFile::release_file_name() {
  // @@protoc_insertion_point(field_release:masterworker.OutputFile.file_name)
  return _impl_.file_name_.Release();
}
inline void OutputFile::set_allocated_file_name(std::string* value) {
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.OutputFile.file_name)
}

// -------------------------------------------------------------------

// MapTaskRequest

// int32 taskId = 1;
inline void MapTaskRequest::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline ::int32_t MapTaskRequest::taskid() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTaskRequest.taskId)
  return _internal_taskid();
}
inline void MapTaskRequest::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTaskRequest.taskId)
}
inline ::int32_t MapTaskRequest::_internal_taskid() const {
  return _impl_.taskid_;
}
inline void MapTaskRequest::_internal_set_taskid(::int32_t value) {
  ;
  _impl_.taskid_ = value;
}

// string filePath = 3;
inline void MapTaskRequest::clear_filepath() {
  _impl_.filepath_.ClearToEmpty();
}
inline const std::string& MapTaskRequest::filepath() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTaskRequest.filePath)
  return _internal_filepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapTaskRequest::set_filepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.filepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MapTaskRequest.filePath)
}
inline std::string* MapTaskRequest::mutable_filepath() {
  std::string* _s = _internal_mutable_filepath();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTaskRequest.filePath)
  return _s;
}
inline const std::string& MapTaskRequest::_internal_filepath() const {
  return _impl_.filepath_.Get();
}
inline void MapTaskRequest::_internal_set_filepath(const std::string& value) {
  ;


  _impl_.filepath_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTaskRequest::_internal_mutable_filepath() {
  ;
  return _impl_.filepath_.Mutable( GetArenaForAllocation());
}
inline std::string* MapTaskRequest::release_filepath() {
  // @@protoc_insertion_point(field_release:masterworker.MapTaskRequest.filePath)
  return _impl_.filepath_.Release();
}
inline void MapTaskRequest::set_allocated_filepath(std::string* value) {
  _impl_.filepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filepath_.IsDefault()) {
          _impl_.filepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTaskRequest.filePath)
}

// .masterworker.Fileshard fileShard = 4;
inline bool MapTaskRequest::has_fileshard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fileshard_ != nullptr);
  return value;
}
inline void MapTaskRequest::clear_fileshard() {
  if (_impl_.fileshard_ != nullptr) _impl_.fileshard_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::masterworker::Fileshard& MapTaskRequest::_internal_fileshard() const {
  const ::masterworker::Fileshard* p = _impl_.fileshard_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::Fileshard&>(
      ::masterworker::_Fileshard_default_instance_);
}
inline const ::masterworker::Fileshard& MapTaskRequest::fileshard() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTaskRequest.fileShard)
  return _internal_fileshard();
}
inline void MapTaskRequest::unsafe_arena_set_allocated_fileshard(
    ::masterworker::Fileshard* fileshard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fileshard_);
  }
  _impl_.fileshard_ = fileshard;
  if (fileshard) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MapTaskRequest.fileShard)
}
inline ::masterworker::Fileshard* MapTaskRequest::release_fileshard() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::Fileshard* temp = _impl_.fileshard_;
  _impl_.fileshard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::masterworker::Fileshard* MapTaskRequest::unsafe_arena_release_fileshard() {
  // @@protoc_insertion_point(field_release:masterworker.MapTaskRequest.fileShard)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::masterworker::Fileshard* temp = _impl_.fileshard_;
  _impl_.fileshard_ = nullptr;
  return temp;
}
inline ::masterworker::Fileshard* MapTaskRequest::_internal_mutable_fileshard() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fileshard_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::Fileshard>(GetArenaForAllocation());
    _impl_.fileshard_ = p;
  }
  return _impl_.fileshard_;
}
inline ::masterworker::Fileshard* MapTaskRequest::mutable_fileshard() {
  ::masterworker::Fileshard* _msg = _internal_mutable_fileshard();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTaskRequest.fileShard)
  return _msg;
}
inline void MapTaskRequest::set_allocated_fileshard(::masterworker::Fileshard* fileshard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fileshard_;
  }
  if (fileshard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fileshard);
    if (message_arena != submessage_arena) {
      fileshard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fileshard, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fileshard_ = fileshard;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTaskRequest.fileShard)
}

// string userid = 5;
inline void MapTaskRequest::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& MapTaskRequest::userid() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTaskRequest.userid)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapTaskRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.MapTaskRequest.userid)
}
inline std::string* MapTaskRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:masterworker.MapTaskRequest.userid)
  return _s;
}
inline const std::string& MapTaskRequest::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void MapTaskRequest::_internal_set_userid(const std::string& value) {
  ;


  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* MapTaskRequest::_internal_mutable_userid() {
  ;
  return _impl_.userid_.Mutable( GetArenaForAllocation());
}
inline std::string* MapTaskRequest::release_userid() {
  // @@protoc_insertion_point(field_release:masterworker.MapTaskRequest.userid)
  return _impl_.userid_.Release();
}
inline void MapTaskRequest::set_allocated_userid(std::string* value) {
  _impl_.userid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapTaskRequest.userid)
}

// -------------------------------------------------------------------

// MapTaskCompleted

// int32 task_id = 1;
inline void MapTaskCompleted::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline ::int32_t MapTaskCompleted::task_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MapTaskCompleted.task_id)
  return _internal_task_id();
}
inline void MapTaskCompleted::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:masterworker.MapTaskCompleted.task_id)
}
inline ::int32_t MapTaskCompleted::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void MapTaskCompleted::_internal_set_task_id(::int32_t value) {
  ;
  _impl_.task_id_ = value;
}

// -------------------------------------------------------------------

// ReduceTaskRequest

// int32 task_id = 1;
inline void ReduceTaskRequest::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline ::int32_t ReduceTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskRequest.task_id)
  return _internal_task_id();
}
inline void ReduceTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.task_id)
}
inline ::int32_t ReduceTaskRequest::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void ReduceTaskRequest::_internal_set_task_id(::int32_t value) {
  ;
  _impl_.task_id_ = value;
}

// string output_file = 2;
inline void ReduceTaskRequest::clear_output_file() {
  _impl_.output_file_.ClearToEmpty();
}
inline const std::string& ReduceTaskRequest::output_file() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskRequest.output_file)
  return _internal_output_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReduceTaskRequest::set_output_file(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.output_file_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.output_file)
}
inline std::string* ReduceTaskRequest::mutable_output_file() {
  std::string* _s = _internal_mutable_output_file();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTaskRequest.output_file)
  return _s;
}
inline const std::string& ReduceTaskRequest::_internal_output_file() const {
  return _impl_.output_file_.Get();
}
inline void ReduceTaskRequest::_internal_set_output_file(const std::string& value) {
  ;


  _impl_.output_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::_internal_mutable_output_file() {
  ;
  return _impl_.output_file_.Mutable( GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::release_output_file() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceTaskRequest.output_file)
  return _impl_.output_file_.Release();
}
inline void ReduceTaskRequest::set_allocated_output_file(std::string* value) {
  _impl_.output_file_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_file_.IsDefault()) {
          _impl_.output_file_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceTaskRequest.output_file)
}

// string userid = 3;
inline void ReduceTaskRequest::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& ReduceTaskRequest::userid() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskRequest.userid)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReduceTaskRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.userid)
}
inline std::string* ReduceTaskRequest::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTaskRequest.userid)
  return _s;
}
inline const std::string& ReduceTaskRequest::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void ReduceTaskRequest::_internal_set_userid(const std::string& value) {
  ;


  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::_internal_mutable_userid() {
  ;
  return _impl_.userid_.Mutable( GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::release_userid() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceTaskRequest.userid)
  return _impl_.userid_.Release();
}
inline void ReduceTaskRequest::set_allocated_userid(std::string* value) {
  _impl_.userid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceTaskRequest.userid)
}

// repeated string inputFilePath = 4;
inline int ReduceTaskRequest::_internal_inputfilepath_size() const {
  return _impl_.inputfilepath_.size();
}
inline int ReduceTaskRequest::inputfilepath_size() const {
  return _internal_inputfilepath_size();
}
inline void ReduceTaskRequest::clear_inputfilepath() {
  _internal_mutable_inputfilepath()->Clear();
}
inline std::string* ReduceTaskRequest::add_inputfilepath() {
  std::string* _s = _internal_add_inputfilepath();
  // @@protoc_insertion_point(field_add_mutable:masterworker.ReduceTaskRequest.inputFilePath)
  return _s;
}
inline const std::string& ReduceTaskRequest::inputfilepath(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskRequest.inputFilePath)
  return _internal_inputfilepath(index);
}
inline std::string* ReduceTaskRequest::mutable_inputfilepath(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTaskRequest.inputFilePath)
  return _internal_mutable_inputfilepath()->Mutable(index);
}
inline void ReduceTaskRequest::set_inputfilepath(int index, const std::string& value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::set_inputfilepath(int index, std::string&& value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::set_inputfilepath(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::set_inputfilepath(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::set_inputfilepath(int index, absl::string_view value) {
  _internal_mutable_inputfilepath()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::add_inputfilepath(const std::string& value) {
  _internal_mutable_inputfilepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::add_inputfilepath(std::string&& value) {
  _internal_mutable_inputfilepath()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::add_inputfilepath(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_inputfilepath()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::add_inputfilepath(const char* value, std::size_t size) {
  _internal_mutable_inputfilepath()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.ReduceTaskRequest.inputFilePath)
}
inline void ReduceTaskRequest::add_inputfilepath(absl::string_view value) {
  _internal_mutable_inputfilepath()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:masterworker.ReduceTaskRequest.inputFilePath)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReduceTaskRequest::inputfilepath() const {
  // @@protoc_insertion_point(field_list:masterworker.ReduceTaskRequest.inputFilePath)
  return _internal_inputfilepath();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ReduceTaskRequest::mutable_inputfilepath() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.ReduceTaskRequest.inputFilePath)
  return _internal_mutable_inputfilepath();
}
inline const std::string& ReduceTaskRequest::_internal_inputfilepath(int index) const {
  return _internal_inputfilepath().Get(index);
}
inline std::string* ReduceTaskRequest::_internal_add_inputfilepath() {
  return _internal_mutable_inputfilepath()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReduceTaskRequest::_internal_inputfilepath() const {
  return _impl_.inputfilepath_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReduceTaskRequest::_internal_mutable_inputfilepath() {
  return &_impl_.inputfilepath_;
}

// string outputFilePath = 5;
inline void ReduceTaskRequest::clear_outputfilepath() {
  _impl_.outputfilepath_.ClearToEmpty();
}
inline const std::string& ReduceTaskRequest::outputfilepath() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskRequest.outputFilePath)
  return _internal_outputfilepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReduceTaskRequest::set_outputfilepath(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.outputfilepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskRequest.outputFilePath)
}
inline std::string* ReduceTaskRequest::mutable_outputfilepath() {
  std::string* _s = _internal_mutable_outputfilepath();
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceTaskRequest.outputFilePath)
  return _s;
}
inline const std::string& ReduceTaskRequest::_internal_outputfilepath() const {
  return _impl_.outputfilepath_.Get();
}
inline void ReduceTaskRequest::_internal_set_outputfilepath(const std::string& value) {
  ;


  _impl_.outputfilepath_.Set(value, GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::_internal_mutable_outputfilepath() {
  ;
  return _impl_.outputfilepath_.Mutable( GetArenaForAllocation());
}
inline std::string* ReduceTaskRequest::release_outputfilepath() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceTaskRequest.outputFilePath)
  return _impl_.outputfilepath_.Release();
}
inline void ReduceTaskRequest::set_allocated_outputfilepath(std::string* value) {
  _impl_.outputfilepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outputfilepath_.IsDefault()) {
          _impl_.outputfilepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceTaskRequest.outputFilePath)
}

// -------------------------------------------------------------------

// ReduceTaskCompleted

// int32 task_id = 1;
inline void ReduceTaskCompleted::clear_task_id() {
  _impl_.task_id_ = 0;
}
inline ::int32_t ReduceTaskCompleted::task_id() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceTaskCompleted.task_id)
  return _internal_task_id();
}
inline void ReduceTaskCompleted::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceTaskCompleted.task_id)
}
inline ::int32_t ReduceTaskCompleted::_internal_task_id() const {
  return _impl_.task_id_;
}
inline void ReduceTaskCompleted::_internal_set_task_id(::int32_t value) {
  ;
  _impl_.task_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto_2epb_2eh
