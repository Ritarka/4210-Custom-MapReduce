syntax = "proto3";

package masterworker;

//To communicate between master and worker node, we will use gRPC
service MasterWorker {
	//for map
	rpc AssignMapTask(MapTask) returns (TaskCompletion);
	//for reduce
	rpc AssignReduceTask(ReduceTask) returns (TaskCompletion);
	 // Sends a greeting
  	rpc SayHello (HelloRequest) returns (HelloReply) {}
  	// Sends another greeting
  	rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}

}

//DELETE this later
// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

//different task type for MapReduce - handled by Master
enum TaskType {
	MAP = 0;
	REDUCE = 1;
	EMIT = 2; //should this be an enum
}

//Need message for input data
message InputData {
	string input = 1;
}

//Need message for output data
message OutputData {
	string result = 1;
}

message MiniShard {
	string file_name = 1;
	int64 start_offset  = 2;
	int64 end_offset = 3;
}
message FileShard {
	repeated MiniShard shards = 1;
}
//Need task for Map function
message MapTask {
	//task ID
	int32 taskId = 1;
	//enum for type
	TaskType taskType = 2;
	//Input data for map 
	//InputData inputData = 3;
	//path to file - intermediate?
	string filePath = 3;
	//file shard info
	FileShard fileShard = 4;
}

//Need task for reduce
message ReduceTask {
	//task ID
	int32 taskId = 1;
	//enum for type
	TaskType taskType = 2;
	//Need list of intermediate result from MapTask - don't need it? will be in the file
	//repeated OutputData intermediateResult = 3;
	//path to file- output?
	repeated string inputFilePath = 3; //to read intermediate data
	string outputFilePath = 4; //to write output data
	//file shard info - doesn't need it- reads from the filepath
	//FileShard fileShard = 4;
}
//After Map or reduce, inform master of task completion
message TaskCompletion {
	//task Id
	int32 taskId = 1;
	//enum type
	TaskType taskType = 2;
	// Output produced by map or reduce
	OutputData outputData = 3;
}



