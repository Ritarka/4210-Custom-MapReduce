syntax = "proto3";

package masterworker;

//To communicate between master and worker node, we will use gRPC
service MasterWorker {
	//for map
	rpc AssignMapTask(MapTaskRequest) returns (MapTaskCompleted);
	//for reduce
	rpc AssignReduceTask(ReduceTaskRequest) returns (ReduceTaskCompleted);
	
	 // Sends a greeting
  	rpc SayHello (HelloRequest) returns (HelloReply) {}
  	// Sends another greeting
  	rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}

}

//DELETE this later
// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

//File shard information
message ShardInfo {
	//name of input file
	string file_name = 1;
	//start offset
	int64 start_offset = 2;
	//end offset
	int64 end_offset = 3;
}

//intermediate file for mapper
message IntermediateFile {
	string file_name = 1;
}

//Output file
message OutputFile {
	string file_name = 1;
}

//Message sent from master to worker to assign map task
message MapTaskRequest {
	int32 task_id = 1;
	ShardInfo shard_info = 2;
	int32 num_reduces = 3;
}

//message sent from worker to master for map task complete
message MapTaskCompleted {
	int32 task_id = 1;
	//list of intermediate files produces
	repeated IntermediateFile intermediate_files = 2;
}
//message from master to worker for reduce task
message ReduceTaskRequest {
	int32 task_id = 1;
	repeated IntermediateFile intermediate_files = 2;
}
//message from worker to master for reduce task
message ReduceTaskCompleted {
	int32 task_id = 1;
	OutputFile output_file = 2;
}


