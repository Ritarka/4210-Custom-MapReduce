// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace masterworker {
template <typename>
PROTOBUF_CONSTEXPR InputData::InputData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDataDefaultTypeInternal() {}
  union {
    InputData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDataDefaultTypeInternal _InputData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OutputData::OutputData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDataDefaultTypeInternal() {}
  union {
    OutputData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDataDefaultTypeInternal _OutputData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MapTask::MapTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inputdata_)*/nullptr
  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0
} {}
struct MapTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTaskDefaultTypeInternal() {}
  union {
    MapTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTaskDefaultTypeInternal _MapTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ReduceTask::ReduceTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.intermediateresult_)*/{}
  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReduceTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReduceTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReduceTaskDefaultTypeInternal() {}
  union {
    ReduceTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReduceTaskDefaultTypeInternal _ReduceTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TaskCompletion::TaskCompletion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.outputdata_)*/nullptr
  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0
} {}
struct TaskCompletionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskCompletionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskCompletionDefaultTypeInternal() {}
  union {
    TaskCompletion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskCompletionDefaultTypeInternal _TaskCompletion_default_instance_;
}  // namespace masterworker
static ::_pb::Metadata file_level_metadata_masterworker_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_masterworker_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_masterworker_2eproto = nullptr;
const ::uint32_t TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::InputData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::InputData, _impl_.input_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::OutputData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::OutputData, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.inputdata_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.intermediateresult_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.outputdata_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::masterworker::InputData)},
        { 9, -1, -1, sizeof(::masterworker::OutputData)},
        { 18, 29, -1, sizeof(::masterworker::MapTask)},
        { 32, -1, -1, sizeof(::masterworker::ReduceTask)},
        { 43, 54, -1, sizeof(::masterworker::TaskCompletion)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::masterworker::_InputData_default_instance_._instance,
    &::masterworker::_OutputData_default_instance_._instance,
    &::masterworker::_MapTask_default_instance_._instance,
    &::masterworker::_ReduceTask_default_instance_._instance,
    &::masterworker::_TaskCompletion_default_instance_._instance,
};
const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022masterworker.proto\022\014masterworker\"\032\n\tIn"
    "putData\022\r\n\005input\030\001 \001(\t\"\034\n\nOutputData\022\016\n\006"
    "result\030\001 \001(\t\"o\n\007MapTask\022\016\n\006taskId\030\001 \001(\005\022"
    "(\n\010taskType\030\002 \001(\0162\026.masterworker.TaskTyp"
    "e\022*\n\tinputData\030\003 \001(\0132\027.masterworker.Inpu"
    "tData\"|\n\nReduceTask\022\016\n\006taskId\030\001 \001(\005\022(\n\010t"
    "askType\030\002 \001(\0162\026.masterworker.TaskType\0224\n"
    "\022intermediateResult\030\003 \003(\0132\030.masterworker"
    ".OutputData\"x\n\016TaskCompletion\022\016\n\006taskId\030"
    "\001 \001(\005\022(\n\010taskType\030\002 \001(\0162\026.masterworker.T"
    "askType\022,\n\noutputData\030\003 \001(\0132\030.masterwork"
    "er.OutputData*)\n\010TaskType\022\007\n\003MAP\020\000\022\n\n\006RE"
    "DUCE\020\001\022\010\n\004EMIT\020\0022\240\001\n\014MasterWorker\022D\n\rAss"
    "ignMapTask\022\025.masterworker.MapTask\032\034.mast"
    "erworker.TaskCompletion\022J\n\020AssignReduceT"
    "ask\022\030.masterworker.ReduceTask\032\034.masterwo"
    "rker.TaskCompletionb\006proto3"
};
static ::absl::once_flag descriptor_table_masterworker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_masterworker_2eproto = {
    false,
    false,
    667,
    descriptor_table_protodef_masterworker_2eproto,
    "masterworker.proto",
    &descriptor_table_masterworker_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_masterworker_2eproto::offsets,
    file_level_metadata_masterworker_2eproto,
    file_level_enum_descriptors_masterworker_2eproto,
    file_level_service_descriptors_masterworker_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_masterworker_2eproto_getter() {
  return &descriptor_table_masterworker_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_masterworker_2eproto(&descriptor_table_masterworker_2eproto);
namespace masterworker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_masterworker_2eproto);
  return file_level_enum_descriptors_masterworker_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class InputData::_Internal {
 public:
};

InputData::InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.InputData)
}
InputData::InputData(const InputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.InputData)
}

inline void InputData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.input_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputData::~InputData() {
  // @@protoc_insertion_point(destructor:masterworker.InputData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.Destroy();
}

void InputData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputData::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.InputData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.InputData.input"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.InputData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    const std::string& _s = this->_internal_input();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.InputData.input");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.InputData)
  return target;
}

::size_t InputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.InputData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputData::GetClassData() const { return &_class_data_; }


void InputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputData*>(&to_msg);
  auto& from = static_cast<const InputData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.InputData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputData::CopyFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputData::IsInitialized() const {
  return true;
}

void InputData::InternalSwap(InputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_, lhs_arena,
                                       &other->_impl_.input_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[0]);
}
// ===================================================================

class OutputData::_Internal {
 public:
};

OutputData::OutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.OutputData)
}
OutputData::OutputData(const OutputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.OutputData)
}

inline void OutputData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputData::~OutputData() {
  // @@protoc_insertion_point(destructor:masterworker.OutputData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void OutputData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputData::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.OutputData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.OutputData.result"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutputData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.OutputData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    const std::string& _s = this->_internal_result();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.OutputData.result");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.OutputData)
  return target;
}

::size_t OutputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.OutputData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputData::GetClassData() const { return &_class_data_; }


void OutputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputData*>(&to_msg);
  auto& from = static_cast<const OutputData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.OutputData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputData::CopyFrom(const OutputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.OutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputData::IsInitialized() const {
  return true;
}

void OutputData::InternalSwap(OutputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_, lhs_arena,
                                       &other->_impl_.result_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[1]);
}
// ===================================================================

class MapTask::_Internal {
 public:
  using HasBits = decltype(std::declval<MapTask>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapTask, _impl_._has_bits_);
  static const ::masterworker::InputData& inputdata(const MapTask* msg);
  static void set_has_inputdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::masterworker::InputData&
MapTask::_Internal::inputdata(const MapTask* msg) {
  return *msg->_impl_.inputdata_;
}
MapTask::MapTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MapTask)
}
MapTask::MapTask(const MapTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inputdata_){nullptr}
    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.inputdata_ = new ::masterworker::InputData(*from._impl_.inputdata_);
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.MapTask)
}

inline void MapTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inputdata_){nullptr}
    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

  };
}

MapTask::~MapTask() {
  // @@protoc_insertion_point(destructor:masterworker.MapTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inputdata_;
}

void MapTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapTask::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MapTask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.inputdata_ != nullptr);
    _impl_.inputdata_->Clear();
  }
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.InputData inputData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputdata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MapTask::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MapTask)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .masterworker.InputData inputData = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inputdata(this),
        _Internal::inputdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MapTask)
  return target;
}

::size_t MapTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MapTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .masterworker.InputData inputData = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputdata_);
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapTask::GetClassData() const { return &_class_data_; }


void MapTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapTask*>(&to_msg);
  auto& from = static_cast<const MapTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MapTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_inputdata()->::masterworker::InputData::MergeFrom(
        from._internal_inputdata());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapTask::CopyFrom(const MapTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MapTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTask::IsInitialized() const {
  return true;
}

void MapTask::InternalSwap(MapTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTask, _impl_.tasktype_)
      + sizeof(MapTask::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(MapTask, _impl_.inputdata_)>(
          reinterpret_cast<char*>(&_impl_.inputdata_),
          reinterpret_cast<char*>(&other->_impl_.inputdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[2]);
}
// ===================================================================

class ReduceTask::_Internal {
 public:
};

ReduceTask::ReduceTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.ReduceTask)
}
ReduceTask::ReduceTask(const ReduceTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReduceTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediateresult_){from._impl_.intermediateresult_}
    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.ReduceTask)
}

inline void ReduceTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.intermediateresult_){arena}
    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReduceTask::~ReduceTask() {
  // @@protoc_insertion_point(destructor:masterworker.ReduceTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReduceTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_intermediateresult()->~RepeatedPtrField();
}

void ReduceTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReduceTask::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ReduceTask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_intermediateresult()->Clear();
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReduceTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .masterworker.OutputData intermediateResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intermediateresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReduceTask::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ReduceTask)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  // repeated .masterworker.OutputData intermediateResult = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_intermediateresult_size()); i < n; i++) {
    const auto& repfield = this->_internal_intermediateresult(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ReduceTask)
  return target;
}

::size_t ReduceTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ReduceTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.OutputData intermediateResult = 3;
  total_size += 1UL * this->_internal_intermediateresult_size();
  for (const auto& msg : this->_internal_intermediateresult()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReduceTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReduceTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReduceTask::GetClassData() const { return &_class_data_; }


void ReduceTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReduceTask*>(&to_msg);
  auto& from = static_cast<const ReduceTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ReduceTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_intermediateresult()->MergeFrom(from._internal_intermediateresult());
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReduceTask::CopyFrom(const ReduceTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ReduceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceTask::IsInitialized() const {
  return true;
}

void ReduceTask::InternalSwap(ReduceTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_intermediateresult()->InternalSwap(other->_internal_mutable_intermediateresult());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReduceTask, _impl_.tasktype_)
      + sizeof(ReduceTask::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(ReduceTask, _impl_.taskid_)>(
          reinterpret_cast<char*>(&_impl_.taskid_),
          reinterpret_cast<char*>(&other->_impl_.taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReduceTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[3]);
}
// ===================================================================

class TaskCompletion::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskCompletion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_._has_bits_);
  static const ::masterworker::OutputData& outputdata(const TaskCompletion* msg);
  static void set_has_outputdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::masterworker::OutputData&
TaskCompletion::_Internal::outputdata(const TaskCompletion* msg) {
  return *msg->_impl_.outputdata_;
}
TaskCompletion::TaskCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.TaskCompletion)
}
TaskCompletion::TaskCompletion(const TaskCompletion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskCompletion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outputdata_){nullptr}
    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.outputdata_ = new ::masterworker::OutputData(*from._impl_.outputdata_);
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.TaskCompletion)
}

inline void TaskCompletion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outputdata_){nullptr}
    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

  };
}

TaskCompletion::~TaskCompletion() {
  // @@protoc_insertion_point(destructor:masterworker.TaskCompletion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskCompletion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.outputdata_;
}

void TaskCompletion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskCompletion::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.TaskCompletion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.outputdata_ != nullptr);
    _impl_.outputdata_->Clear();
  }
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCompletion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.OutputData outputData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputdata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TaskCompletion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.TaskCompletion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .masterworker.OutputData outputData = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::outputdata(this),
        _Internal::outputdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.TaskCompletion)
  return target;
}

::size_t TaskCompletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.TaskCompletion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .masterworker.OutputData outputData = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outputdata_);
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCompletion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskCompletion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCompletion::GetClassData() const { return &_class_data_; }


void TaskCompletion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskCompletion*>(&to_msg);
  auto& from = static_cast<const TaskCompletion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.TaskCompletion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_outputdata()->::masterworker::OutputData::MergeFrom(
        from._internal_outputdata());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCompletion::CopyFrom(const TaskCompletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.TaskCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCompletion::IsInitialized() const {
  return true;
}

void TaskCompletion::InternalSwap(TaskCompletion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_.tasktype_)
      + sizeof(TaskCompletion::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_.outputdata_)>(
          reinterpret_cast<char*>(&_impl_.outputdata_),
          reinterpret_cast<char*>(&other->_impl_.outputdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCompletion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::InputData*
Arena::CreateMaybeMessage< ::masterworker::InputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::InputData >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::OutputData*
Arena::CreateMaybeMessage< ::masterworker::OutputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::OutputData >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MapTask*
Arena::CreateMaybeMessage< ::masterworker::MapTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MapTask >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ReduceTask*
Arena::CreateMaybeMessage< ::masterworker::ReduceTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ReduceTask >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::TaskCompletion*
Arena::CreateMaybeMessage< ::masterworker::TaskCompletion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::TaskCompletion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
