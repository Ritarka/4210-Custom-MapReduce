// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace masterworker {
template <typename>
PROTOBUF_CONSTEXPR HelloRequest::HelloRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloRequestDefaultTypeInternal() {}
  union {
    HelloRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HelloReply::HelloReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloReplyDefaultTypeInternal() {}
  union {
    HelloReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InputData::InputData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputDataDefaultTypeInternal() {}
  union {
    InputData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputDataDefaultTypeInternal _InputData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OutputData::OutputData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDataDefaultTypeInternal() {}
  union {
    OutputData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDataDefaultTypeInternal _OutputData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MiniShard::MiniShard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_offset_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MiniShardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MiniShardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MiniShardDefaultTypeInternal() {}
  union {
    MiniShard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MiniShardDefaultTypeInternal _MiniShard_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FileShard::FileShard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileShardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileShardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileShardDefaultTypeInternal() {}
  union {
    FileShard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileShardDefaultTypeInternal _FileShard_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MapTask::MapTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fileshard_)*/nullptr
  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0
} {}
struct MapTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTaskDefaultTypeInternal() {}
  union {
    MapTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTaskDefaultTypeInternal _MapTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ReduceTask::ReduceTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputfilepath_)*/{}
  , /*decltype(_impl_.outputfilepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReduceTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReduceTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReduceTaskDefaultTypeInternal() {}
  union {
    ReduceTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReduceTaskDefaultTypeInternal _ReduceTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TaskCompletion::TaskCompletion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.outputdata_)*/nullptr
  , /*decltype(_impl_.taskid_)*/ 0

  , /*decltype(_impl_.tasktype_)*/ 0
} {}
struct TaskCompletionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskCompletionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskCompletionDefaultTypeInternal() {}
  union {
    TaskCompletion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskCompletionDefaultTypeInternal _TaskCompletion_default_instance_;
}  // namespace masterworker
static ::_pb::Metadata file_level_metadata_masterworker_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_masterworker_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_masterworker_2eproto = nullptr;
const ::uint32_t TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::HelloRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::HelloRequest, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::HelloReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::HelloReply, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::InputData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::InputData, _impl_.input_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::OutputData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::OutputData, _impl_.result_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::MiniShard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::MiniShard, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MiniShard, _impl_.start_offset_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MiniShard, _impl_.end_offset_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::FileShard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::FileShard, _impl_.shards_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.filepath_),
    PROTOBUF_FIELD_OFFSET(::masterworker::MapTask, _impl_.fileshard_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.inputfilepath_),
    PROTOBUF_FIELD_OFFSET(::masterworker::ReduceTask, _impl_.outputfilepath_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.taskid_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.tasktype_),
    PROTOBUF_FIELD_OFFSET(::masterworker::TaskCompletion, _impl_.outputdata_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::masterworker::HelloRequest)},
        { 9, -1, -1, sizeof(::masterworker::HelloReply)},
        { 18, -1, -1, sizeof(::masterworker::InputData)},
        { 27, -1, -1, sizeof(::masterworker::OutputData)},
        { 36, -1, -1, sizeof(::masterworker::MiniShard)},
        { 47, -1, -1, sizeof(::masterworker::FileShard)},
        { 56, 68, -1, sizeof(::masterworker::MapTask)},
        { 72, -1, -1, sizeof(::masterworker::ReduceTask)},
        { 84, 95, -1, sizeof(::masterworker::TaskCompletion)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::masterworker::_HelloRequest_default_instance_._instance,
    &::masterworker::_HelloReply_default_instance_._instance,
    &::masterworker::_InputData_default_instance_._instance,
    &::masterworker::_OutputData_default_instance_._instance,
    &::masterworker::_MiniShard_default_instance_._instance,
    &::masterworker::_FileShard_default_instance_._instance,
    &::masterworker::_MapTask_default_instance_._instance,
    &::masterworker::_ReduceTask_default_instance_._instance,
    &::masterworker::_TaskCompletion_default_instance_._instance,
};
const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022masterworker.proto\022\014masterworker\"\034\n\014He"
    "lloRequest\022\014\n\004name\030\001 \001(\t\"\035\n\nHelloReply\022\017"
    "\n\007message\030\001 \001(\t\"\032\n\tInputData\022\r\n\005input\030\001 "
    "\001(\t\"\034\n\nOutputData\022\016\n\006result\030\001 \001(\t\"H\n\tMin"
    "iShard\022\021\n\tfile_name\030\001 \001(\t\022\024\n\014start_offse"
    "t\030\002 \001(\003\022\022\n\nend_offset\030\003 \001(\003\"4\n\tFileShard"
    "\022\'\n\006shards\030\001 \003(\0132\027.masterworker.MiniShar"
    "d\"\201\001\n\007MapTask\022\016\n\006taskId\030\001 \001(\005\022(\n\010taskTyp"
    "e\030\002 \001(\0162\026.masterworker.TaskType\022\020\n\010fileP"
    "ath\030\003 \001(\t\022*\n\tfileShard\030\004 \001(\0132\027.masterwor"
    "ker.FileShard\"u\n\nReduceTask\022\016\n\006taskId\030\001 "
    "\001(\005\022(\n\010taskType\030\002 \001(\0162\026.masterworker.Tas"
    "kType\022\025\n\rinputFilePath\030\003 \003(\t\022\026\n\016outputFi"
    "lePath\030\004 \001(\t\"x\n\016TaskCompletion\022\016\n\006taskId"
    "\030\001 \001(\005\022(\n\010taskType\030\002 \001(\0162\026.masterworker."
    "TaskType\022,\n\noutputData\030\003 \001(\0132\030.masterwor"
    "ker.OutputData*)\n\010TaskType\022\007\n\003MAP\020\000\022\n\n\006R"
    "EDUCE\020\001\022\010\n\004EMIT\020\0022\255\002\n\014MasterWorker\022D\n\rAs"
    "signMapTask\022\025.masterworker.MapTask\032\034.mas"
    "terworker.TaskCompletion\022J\n\020AssignReduce"
    "Task\022\030.masterworker.ReduceTask\032\034.masterw"
    "orker.TaskCompletion\022B\n\010SayHello\022\032.maste"
    "rworker.HelloRequest\032\030.masterworker.Hell"
    "oReply\"\000\022G\n\rSayHelloAgain\022\032.masterworker"
    ".HelloRequest\032\030.masterworker.HelloReply\""
    "\000b\006proto3"
};
static ::absl::once_flag descriptor_table_masterworker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_masterworker_2eproto = {
    false,
    false,
    1009,
    descriptor_table_protodef_masterworker_2eproto,
    "masterworker.proto",
    &descriptor_table_masterworker_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_masterworker_2eproto::offsets,
    file_level_metadata_masterworker_2eproto,
    file_level_enum_descriptors_masterworker_2eproto,
    file_level_service_descriptors_masterworker_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_masterworker_2eproto_getter() {
  return &descriptor_table_masterworker_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_masterworker_2eproto(&descriptor_table_masterworker_2eproto);
namespace masterworker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_masterworker_2eproto);
  return file_level_enum_descriptors_masterworker_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.HelloRequest)
}

inline void HelloRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:masterworker.HelloRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void HelloRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.HelloRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.HelloRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HelloRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.HelloRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.HelloRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.HelloRequest)
  return target;
}

::size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.HelloRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloRequest::GetClassData() const { return &_class_data_; }


void HelloRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloRequest*>(&to_msg);
  auto& from = static_cast<const HelloRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.HelloRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[0]);
}
// ===================================================================

class HelloReply::_Internal {
 public:
};

HelloReply::HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.HelloReply)
}

inline void HelloReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:masterworker.HelloReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HelloReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.HelloReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.HelloReply.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HelloReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.HelloReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.HelloReply.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.HelloReply)
  return target;
}

::size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.HelloReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloReply::GetClassData() const { return &_class_data_; }


void HelloReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloReply*>(&to_msg);
  auto& from = static_cast<const HelloReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.HelloReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[1]);
}
// ===================================================================

class InputData::_Internal {
 public:
};

InputData::InputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.InputData)
}
InputData::InputData(const InputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.InputData)
}

inline void InputData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.input_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InputData::~InputData() {
  // @@protoc_insertion_point(destructor:masterworker.InputData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_.Destroy();
}

void InputData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputData::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.InputData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.InputData.input"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InputData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.InputData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    const std::string& _s = this->_internal_input();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.InputData.input");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.InputData)
  return target;
}

::size_t InputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.InputData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input = 1;
  if (!this->_internal_input().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_input());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputData::GetClassData() const { return &_class_data_; }


void InputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputData*>(&to_msg);
  auto& from = static_cast<const InputData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.InputData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputData::CopyFrom(const InputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.InputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputData::IsInitialized() const {
  return true;
}

void InputData::InternalSwap(InputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_, lhs_arena,
                                       &other->_impl_.input_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[2]);
}
// ===================================================================

class OutputData::_Internal {
 public:
};

OutputData::OutputData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.OutputData)
}
OutputData::OutputData(const OutputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.OutputData)
}

inline void OutputData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputData::~OutputData() {
  // @@protoc_insertion_point(destructor:masterworker.OutputData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void OutputData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputData::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.OutputData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.OutputData.result"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OutputData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.OutputData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    const std::string& _s = this->_internal_result();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.OutputData.result");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.OutputData)
  return target;
}

::size_t OutputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.OutputData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputData::GetClassData() const { return &_class_data_; }


void OutputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputData*>(&to_msg);
  auto& from = static_cast<const OutputData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.OutputData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputData::CopyFrom(const OutputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.OutputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputData::IsInitialized() const {
  return true;
}

void OutputData::InternalSwap(OutputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_, lhs_arena,
                                       &other->_impl_.result_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[3]);
}
// ===================================================================

class MiniShard::_Internal {
 public:
};

MiniShard::MiniShard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MiniShard)
}
MiniShard::MiniShard(const MiniShard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MiniShard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_) {}

    , decltype(_impl_.start_offset_) {}

    , decltype(_impl_.end_offset_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_offset_, &from._impl_.start_offset_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.end_offset_) -
    reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  // @@protoc_insertion_point(copy_constructor:masterworker.MiniShard)
}

inline void MiniShard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_) {}

    , decltype(_impl_.start_offset_) { ::int64_t{0} }

    , decltype(_impl_.end_offset_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MiniShard::~MiniShard() {
  // @@protoc_insertion_point(destructor:masterworker.MiniShard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MiniShard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void MiniShard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MiniShard::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MiniShard)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.start_offset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_offset_) -
      reinterpret_cast<char*>(&_impl_.start_offset_)) + sizeof(_impl_.end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MiniShard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.MiniShard.file_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 end_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MiniShard::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MiniShard)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.MiniShard.file_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 start_offset = 2;
  if (this->_internal_start_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start_offset(), target);
  }

  // int64 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MiniShard)
  return target;
}

::size_t MiniShard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MiniShard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // int64 start_offset = 2;
  if (this->_internal_start_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_offset());
  }

  // int64 end_offset = 3;
  if (this->_internal_end_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MiniShard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MiniShard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MiniShard::GetClassData() const { return &_class_data_; }


void MiniShard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MiniShard*>(&to_msg);
  auto& from = static_cast<const MiniShard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MiniShard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_start_offset() != 0) {
    _this->_internal_set_start_offset(from._internal_start_offset());
  }
  if (from._internal_end_offset() != 0) {
    _this->_internal_set_end_offset(from._internal_end_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MiniShard::CopyFrom(const MiniShard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MiniShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniShard::IsInitialized() const {
  return true;
}

void MiniShard::InternalSwap(MiniShard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, lhs_arena,
                                       &other->_impl_.file_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MiniShard, _impl_.end_offset_)
      + sizeof(MiniShard::_impl_.end_offset_)
      - PROTOBUF_FIELD_OFFSET(MiniShard, _impl_.start_offset_)>(
          reinterpret_cast<char*>(&_impl_.start_offset_),
          reinterpret_cast<char*>(&other->_impl_.start_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MiniShard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[4]);
}
// ===================================================================

class FileShard::_Internal {
 public:
};

FileShard::FileShard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.FileShard)
}
FileShard::FileShard(const FileShard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileShard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shards_){from._impl_.shards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:masterworker.FileShard)
}

inline void FileShard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.shards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FileShard::~FileShard() {
  // @@protoc_insertion_point(destructor:masterworker.FileShard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileShard::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_shards()->~RepeatedPtrField();
}

void FileShard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileShard::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.FileShard)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_shards()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileShard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .masterworker.MiniShard shards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileShard::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.FileShard)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .masterworker.MiniShard shards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shards_size()); i < n; i++) {
    const auto& repfield = this->_internal_shards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.FileShard)
  return target;
}

::size_t FileShard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.FileShard)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.MiniShard shards = 1;
  total_size += 1UL * this->_internal_shards_size();
  for (const auto& msg : this->_internal_shards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileShard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileShard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileShard::GetClassData() const { return &_class_data_; }


void FileShard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileShard*>(&to_msg);
  auto& from = static_cast<const FileShard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.FileShard)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_shards()->MergeFrom(from._internal_shards());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileShard::CopyFrom(const FileShard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.FileShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileShard::IsInitialized() const {
  return true;
}

void FileShard::InternalSwap(FileShard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_shards()->InternalSwap(other->_internal_mutable_shards());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileShard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[5]);
}
// ===================================================================

class MapTask::_Internal {
 public:
  using HasBits = decltype(std::declval<MapTask>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MapTask, _impl_._has_bits_);
  static const ::masterworker::FileShard& fileshard(const MapTask* msg);
  static void set_has_fileshard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::masterworker::FileShard&
MapTask::_Internal::fileshard(const MapTask* msg) {
  return *msg->_impl_.fileshard_;
}
MapTask::MapTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MapTask)
}
MapTask::MapTask(const MapTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filepath_) {}

    , decltype(_impl_.fileshard_){nullptr}
    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fileshard_ = new ::masterworker::FileShard(*from._impl_.fileshard_);
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.MapTask)
}

inline void MapTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filepath_) {}

    , decltype(_impl_.fileshard_){nullptr}
    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapTask::~MapTask() {
  // @@protoc_insertion_point(destructor:masterworker.MapTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fileshard_;
}

void MapTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapTask::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MapTask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fileshard_ != nullptr);
    _impl_.fileshard_->Clear();
  }
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.MapTask.filePath"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.FileShard fileShard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fileshard(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MapTask::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MapTask)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  // string filePath = 3;
  if (!this->_internal_filepath().empty()) {
    const std::string& _s = this->_internal_filepath();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.MapTask.filePath");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .masterworker.FileShard fileShard = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fileshard(this),
        _Internal::fileshard(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MapTask)
  return target;
}

::size_t MapTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MapTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 3;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filepath());
  }

  // .masterworker.FileShard fileShard = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fileshard_);
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapTask::GetClassData() const { return &_class_data_; }


void MapTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapTask*>(&to_msg);
  auto& from = static_cast<const MapTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MapTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fileshard()->::masterworker::FileShard::MergeFrom(
        from._internal_fileshard());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapTask::CopyFrom(const MapTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MapTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTask::IsInitialized() const {
  return true;
}

void MapTask::InternalSwap(MapTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, lhs_arena,
                                       &other->_impl_.filepath_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTask, _impl_.tasktype_)
      + sizeof(MapTask::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(MapTask, _impl_.fileshard_)>(
          reinterpret_cast<char*>(&_impl_.fileshard_),
          reinterpret_cast<char*>(&other->_impl_.fileshard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[6]);
}
// ===================================================================

class ReduceTask::_Internal {
 public:
};

ReduceTask::ReduceTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.ReduceTask)
}
ReduceTask::ReduceTask(const ReduceTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReduceTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputfilepath_){from._impl_.inputfilepath_}
    , decltype(_impl_.outputfilepath_) {}

    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.outputfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.outputfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputfilepath().empty()) {
    _this->_impl_.outputfilepath_.Set(from._internal_outputfilepath(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.ReduceTask)
}

inline void ReduceTask::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.inputfilepath_){arena}
    , decltype(_impl_.outputfilepath_) {}

    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.outputfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.outputfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReduceTask::~ReduceTask() {
  // @@protoc_insertion_point(destructor:masterworker.ReduceTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReduceTask::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_inputfilepath()->~RepeatedPtrField();
  _impl_.outputfilepath_.Destroy();
}

void ReduceTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReduceTask::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ReduceTask)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_inputfilepath()->Clear();
  _impl_.outputfilepath_.ClearToEmpty();
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReduceTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string inputFilePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inputfilepath();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "masterworker.ReduceTask.inputFilePath"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string outputFilePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_outputfilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "masterworker.ReduceTask.outputFilePath"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ReduceTask::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ReduceTask)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  // repeated string inputFilePath = 3;
  for (int i = 0, n = this->_internal_inputfilepath_size(); i < n; ++i) {
    const auto& s = this->_internal_inputfilepath(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.ReduceTask.inputFilePath");
    target = stream->WriteString(3, s, target);
  }

  // string outputFilePath = 4;
  if (!this->_internal_outputfilepath().empty()) {
    const std::string& _s = this->_internal_outputfilepath();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "masterworker.ReduceTask.outputFilePath");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ReduceTask)
  return target;
}

::size_t ReduceTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ReduceTask)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string inputFilePath = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_inputfilepath().size());
  for (int i = 0, n = _internal_inputfilepath().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_inputfilepath().Get(i));
  }

  // string outputFilePath = 4;
  if (!this->_internal_outputfilepath().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_outputfilepath());
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReduceTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReduceTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReduceTask::GetClassData() const { return &_class_data_; }


void ReduceTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReduceTask*>(&to_msg);
  auto& from = static_cast<const ReduceTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ReduceTask)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_inputfilepath()->MergeFrom(from._internal_inputfilepath());
  if (!from._internal_outputfilepath().empty()) {
    _this->_internal_set_outputfilepath(from._internal_outputfilepath());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReduceTask::CopyFrom(const ReduceTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ReduceTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceTask::IsInitialized() const {
  return true;
}

void ReduceTask::InternalSwap(ReduceTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_inputfilepath()->InternalSwap(
      other->_internal_mutable_inputfilepath());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.outputfilepath_, lhs_arena,
                                       &other->_impl_.outputfilepath_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReduceTask, _impl_.tasktype_)
      + sizeof(ReduceTask::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(ReduceTask, _impl_.taskid_)>(
          reinterpret_cast<char*>(&_impl_.taskid_),
          reinterpret_cast<char*>(&other->_impl_.taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReduceTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[7]);
}
// ===================================================================

class TaskCompletion::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskCompletion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_._has_bits_);
  static const ::masterworker::OutputData& outputdata(const TaskCompletion* msg);
  static void set_has_outputdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::masterworker::OutputData&
TaskCompletion::_Internal::outputdata(const TaskCompletion* msg) {
  return *msg->_impl_.outputdata_;
}
TaskCompletion::TaskCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.TaskCompletion)
}
TaskCompletion::TaskCompletion(const TaskCompletion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskCompletion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outputdata_){nullptr}
    , decltype(_impl_.taskid_) {}

    , decltype(_impl_.tasktype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.outputdata_ = new ::masterworker::OutputData(*from._impl_.outputdata_);
  }
  ::memcpy(&_impl_.taskid_, &from._impl_.taskid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tasktype_) -
    reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  // @@protoc_insertion_point(copy_constructor:masterworker.TaskCompletion)
}

inline void TaskCompletion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outputdata_){nullptr}
    , decltype(_impl_.taskid_) { 0 }

    , decltype(_impl_.tasktype_) { 0 }

  };
}

TaskCompletion::~TaskCompletion() {
  // @@protoc_insertion_point(destructor:masterworker.TaskCompletion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskCompletion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.outputdata_;
}

void TaskCompletion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskCompletion::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.TaskCompletion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.outputdata_ != nullptr);
    _impl_.outputdata_->Clear();
  }
  ::memset(&_impl_.taskid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tasktype_) -
      reinterpret_cast<char*>(&_impl_.taskid_)) + sizeof(_impl_.tasktype_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskCompletion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 taskId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.TaskType taskType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tasktype(static_cast<::masterworker::TaskType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .masterworker.OutputData outputData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputdata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TaskCompletion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.TaskCompletion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_taskid(), target);
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_tasktype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .masterworker.OutputData outputData = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::outputdata(this),
        _Internal::outputdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.TaskCompletion)
  return target;
}

::size_t TaskCompletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.TaskCompletion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .masterworker.OutputData outputData = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outputdata_);
  }

  // int32 taskId = 1;
  if (this->_internal_taskid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taskid());
  }

  // .masterworker.TaskType taskType = 2;
  if (this->_internal_tasktype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tasktype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskCompletion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskCompletion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskCompletion::GetClassData() const { return &_class_data_; }


void TaskCompletion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskCompletion*>(&to_msg);
  auto& from = static_cast<const TaskCompletion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:masterworker.TaskCompletion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_outputdata()->::masterworker::OutputData::MergeFrom(
        from._internal_outputdata());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_tasktype() != 0) {
    _this->_internal_set_tasktype(from._internal_tasktype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskCompletion::CopyFrom(const TaskCompletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.TaskCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCompletion::IsInitialized() const {
  return true;
}

void TaskCompletion::InternalSwap(TaskCompletion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_.tasktype_)
      + sizeof(TaskCompletion::_impl_.tasktype_)
      - PROTOBUF_FIELD_OFFSET(TaskCompletion, _impl_.outputdata_)>(
          reinterpret_cast<char*>(&_impl_.outputdata_),
          reinterpret_cast<char*>(&other->_impl_.outputdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCompletion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_masterworker_2eproto_getter, &descriptor_table_masterworker_2eproto_once,
      file_level_metadata_masterworker_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::HelloRequest*
Arena::CreateMaybeMessage< ::masterworker::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::HelloReply*
Arena::CreateMaybeMessage< ::masterworker::HelloReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::InputData*
Arena::CreateMaybeMessage< ::masterworker::InputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::InputData >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::OutputData*
Arena::CreateMaybeMessage< ::masterworker::OutputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::OutputData >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MiniShard*
Arena::CreateMaybeMessage< ::masterworker::MiniShard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MiniShard >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::FileShard*
Arena::CreateMaybeMessage< ::masterworker::FileShard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::FileShard >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MapTask*
Arena::CreateMaybeMessage< ::masterworker::MapTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MapTask >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ReduceTask*
Arena::CreateMaybeMessage< ::masterworker::ReduceTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ReduceTask >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::TaskCompletion*
Arena::CreateMaybeMessage< ::masterworker::TaskCompletion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::TaskCompletion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
