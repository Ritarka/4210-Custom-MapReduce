// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto

#include "masterworker.pb.h"
#include "masterworker.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace masterworker {

static const char* MasterWorker_method_names[] = {
  "/masterworker.MasterWorker/AssignMapTask",
  "/masterworker.MasterWorker/AssignReduceTask",
};

std::unique_ptr< MasterWorker::Stub> MasterWorker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MasterWorker::Stub> stub(new MasterWorker::Stub(channel, options));
  return stub;
}

MasterWorker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AssignMapTask_(MasterWorker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignReduceTask_(MasterWorker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MasterWorker::Stub::AssignMapTask(::grpc::ClientContext* context, const ::masterworker::MapTask& request, ::masterworker::TaskCompletion* response) {
  return ::grpc::internal::BlockingUnaryCall< ::masterworker::MapTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignMapTask_, context, request, response);
}

void MasterWorker::Stub::async::AssignMapTask(::grpc::ClientContext* context, const ::masterworker::MapTask* request, ::masterworker::TaskCompletion* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::masterworker::MapTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignMapTask_, context, request, response, std::move(f));
}

void MasterWorker::Stub::async::AssignMapTask(::grpc::ClientContext* context, const ::masterworker::MapTask* request, ::masterworker::TaskCompletion* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignMapTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskCompletion>* MasterWorker::Stub::PrepareAsyncAssignMapTaskRaw(::grpc::ClientContext* context, const ::masterworker::MapTask& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::masterworker::TaskCompletion, ::masterworker::MapTask, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignMapTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskCompletion>* MasterWorker::Stub::AsyncAssignMapTaskRaw(::grpc::ClientContext* context, const ::masterworker::MapTask& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignMapTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MasterWorker::Stub::AssignReduceTask(::grpc::ClientContext* context, const ::masterworker::ReduceTask& request, ::masterworker::TaskCompletion* response) {
  return ::grpc::internal::BlockingUnaryCall< ::masterworker::ReduceTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignReduceTask_, context, request, response);
}

void MasterWorker::Stub::async::AssignReduceTask(::grpc::ClientContext* context, const ::masterworker::ReduceTask* request, ::masterworker::TaskCompletion* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::masterworker::ReduceTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignReduceTask_, context, request, response, std::move(f));
}

void MasterWorker::Stub::async::AssignReduceTask(::grpc::ClientContext* context, const ::masterworker::ReduceTask* request, ::masterworker::TaskCompletion* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignReduceTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskCompletion>* MasterWorker::Stub::PrepareAsyncAssignReduceTaskRaw(::grpc::ClientContext* context, const ::masterworker::ReduceTask& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::masterworker::TaskCompletion, ::masterworker::ReduceTask, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignReduceTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskCompletion>* MasterWorker::Stub::AsyncAssignReduceTaskRaw(::grpc::ClientContext* context, const ::masterworker::ReduceTask& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignReduceTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

MasterWorker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterWorker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterWorker::Service, ::masterworker::MapTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::masterworker::MapTask* req,
             ::masterworker::TaskCompletion* resp) {
               return service->AssignMapTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterWorker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterWorker::Service, ::masterworker::ReduceTask, ::masterworker::TaskCompletion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::masterworker::ReduceTask* req,
             ::masterworker::TaskCompletion* resp) {
               return service->AssignReduceTask(ctx, req, resp);
             }, this)));
}

MasterWorker::Service::~Service() {
}

::grpc::Status MasterWorker::Service::AssignMapTask(::grpc::ServerContext* context, const ::masterworker::MapTask* request, ::masterworker::TaskCompletion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterWorker::Service::AssignReduceTask(::grpc::ServerContext* context, const ::masterworker::ReduceTask* request, ::masterworker::TaskCompletion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterworker

